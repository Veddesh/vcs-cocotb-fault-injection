`timescale 1ns/1ps

//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87a)
//
// On Fri Jun 20 06:34:17 UTC 2025
//
//
// Ports:
// Name                         I/O  size props
// read_req                       O    65
// RDY_read_req                   O     1 const
// write_req                      O     1
// RDY_write_req                  O     1 const
// io_SOUT                        O     1 reg
// io_SOUT_EN                     O     1 reg
// interrupt                      O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_req_addr                  I    32
// read_req_size                  I     2
// write_req_addr                 I    32
// write_req_data                 I    64
// write_req_size                 I     2
// io_SIN                         I     1 reg
// EN_read_req                    I     1
// EN_write_req                   I     1
//
// Combinational paths from inputs to outputs:
//   (read_req_addr, read_req_size) -> read_req
//   (write_req_addr, write_req_size) -> write_req
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mktest(CLK,
	      RST_N,

	      read_req_addr,
	      read_req_size,
	      EN_read_req,
	      read_req,
	      RDY_read_req,

	      write_req_addr,
	      write_req_data,
	      write_req_size,
	      EN_write_req,
	      write_req,
	      RDY_write_req,

	      io_SIN,

	      io_SOUT,

	      io_SOUT_EN,

	      interrupt);
  input  CLK;
  input  RST_N;

  // actionvalue method read_req
  input  [31 : 0] read_req_addr;
  input  [1 : 0] read_req_size;
  input  EN_read_req;
  output [64 : 0] read_req;
  output RDY_read_req;

  // actionvalue method write_req
  input  [31 : 0] write_req_addr;
  input  [63 : 0] write_req_data;
  input  [1 : 0] write_req_size;
  input  EN_write_req;
  output write_req;
  output RDY_write_req;

  // action method io_sin
  input  io_SIN;

  // value method io_sout
  output io_SOUT;

  // value method io_sout_en
  output io_SOUT_EN;

  // value method interrupt
  output interrupt;

  // signals for module outputs
  wire [64 : 0] read_req;
  wire RDY_read_req, RDY_write_req, interrupt, io_SOUT, io_SOUT_EN, write_req;

  // inlined wires
  wire uart_uart_fifoRecv_r_deq_whas,
       uart_uart_fifoXmit_r_enq_whas,
       uart_uart_pwRecvCellCountReset_whas,
       uart_uart_pwRecvEnableBitCount_whas,
       uart_uart_pwRecvResetBitCount_whas,
       uart_uart_pwXmitCellCountReset_whas,
       uart_uart_pwXmitEnableBitCount_whas,
       uart_uart_pwXmitLoadBuffer_whas,
       uart_uart_pwXmitResetBitCount_whas;

  // register uart_baud_value
  reg [15 : 0] uart_baud_value;
  wire [15 : 0] uart_baud_value_D_IN;
  wire uart_baud_value_EN;

  // register uart_rg_charsize
  reg [5 : 0] uart_rg_charsize;
  wire [5 : 0] uart_rg_charsize_D_IN;
  wire uart_rg_charsize_EN;

  // register uart_rg_delay_control
  reg [15 : 0] uart_rg_delay_control;
  wire [15 : 0] uart_rg_delay_control_D_IN;
  wire uart_rg_delay_control_EN;

  // register uart_rg_interrupt_en
  reg [15 : 0] uart_rg_interrupt_en;
  wire [15 : 0] uart_rg_interrupt_en_D_IN;
  wire uart_rg_interrupt_en_EN;

  // register uart_rg_parity
  reg [1 : 0] uart_rg_parity;
  wire [1 : 0] uart_rg_parity_D_IN;
  wire uart_rg_parity_EN;

  // register uart_rg_rx_threshold
  reg [4 : 0] uart_rg_rx_threshold;
  wire [4 : 0] uart_rg_rx_threshold_D_IN;
  wire uart_rg_rx_threshold_EN;

  // register uart_rg_stopbits
  reg [1 : 0] uart_rg_stopbits;
  wire [1 : 0] uart_rg_stopbits_D_IN;
  wire uart_rg_stopbits_EN;

  // register uart_uart_error_status_register
  reg [3 : 0] uart_uart_error_status_register;
  wire [3 : 0] uart_uart_error_status_register_D_IN;
  wire uart_uart_error_status_register_EN;

  // register uart_uart_fifoRecv_countReg
  reg [4 : 0] uart_uart_fifoRecv_countReg;
  wire [4 : 0] uart_uart_fifoRecv_countReg_D_IN;
  wire uart_uart_fifoRecv_countReg_EN;

  // register uart_uart_fifoXmit_countReg
  reg [4 : 0] uart_uart_fifoXmit_countReg;
  wire [4 : 0] uart_uart_fifoXmit_countReg_D_IN;
  wire uart_uart_fifoXmit_countReg_EN;

  // register uart_uart_fifo_almost_full
  reg uart_uart_fifo_almost_full;
  wire uart_uart_fifo_almost_full_D_IN, uart_uart_fifo_almost_full_EN;

  // register uart_uart_out_enable
  reg uart_uart_out_enable;
  wire uart_uart_out_enable_D_IN, uart_uart_out_enable_EN;

  // register uart_uart_rRecvBitCount
  reg [5 : 0] uart_uart_rRecvBitCount;
  wire [5 : 0] uart_uart_rRecvBitCount_D_IN;
  wire uart_uart_rRecvBitCount_EN;

  // register uart_uart_rRecvCellCount
  reg [3 : 0] uart_uart_rRecvCellCount;
  wire [3 : 0] uart_uart_rRecvCellCount_D_IN;
  wire uart_uart_rRecvCellCount_EN;

  // register uart_uart_rRecvData
  reg uart_uart_rRecvData;
  wire uart_uart_rRecvData_D_IN, uart_uart_rRecvData_EN;

  // register uart_uart_rRecvParity
  reg uart_uart_rRecvParity;
  wire uart_uart_rRecvParity_D_IN, uart_uart_rRecvParity_EN;

  // register uart_uart_rRecvState
  reg [2 : 0] uart_uart_rRecvState;
  reg [2 : 0] uart_uart_rRecvState_D_IN;
  wire uart_uart_rRecvState_EN;

  // register uart_uart_rXmitBitCount
  reg [5 : 0] uart_uart_rXmitBitCount;
  wire [5 : 0] uart_uart_rXmitBitCount_D_IN;
  wire uart_uart_rXmitBitCount_EN;

  // register uart_uart_rXmitCellCount
  reg [3 : 0] uart_uart_rXmitCellCount;
  wire [3 : 0] uart_uart_rXmitCellCount_D_IN;
  wire uart_uart_rXmitCellCount_EN;

  // register uart_uart_rXmitDataOut
  reg uart_uart_rXmitDataOut;
  reg uart_uart_rXmitDataOut_D_IN;
  wire uart_uart_rXmitDataOut_EN;

  // register uart_uart_rXmitParity
  reg uart_uart_rXmitParity;
  wire uart_uart_rXmitParity_D_IN, uart_uart_rXmitParity_EN;

  // register uart_uart_rXmitState
  reg [3 : 0] uart_uart_rXmitState;
  reg [3 : 0] uart_uart_rXmitState_D_IN;
  wire uart_uart_rXmitState_EN;

  // register uart_uart_rg_delay_count
  reg [15 : 0] uart_uart_rg_delay_count;
  reg [15 : 0] uart_uart_rg_delay_count_D_IN;
  wire uart_uart_rg_delay_count_EN;

  // register uart_uart_vrRecvBuffer_0
  reg uart_uart_vrRecvBuffer_0;
  wire uart_uart_vrRecvBuffer_0_D_IN, uart_uart_vrRecvBuffer_0_EN;

  // register uart_uart_vrRecvBuffer_1
  reg uart_uart_vrRecvBuffer_1;
  wire uart_uart_vrRecvBuffer_1_D_IN, uart_uart_vrRecvBuffer_1_EN;

  // register uart_uart_vrRecvBuffer_10
  reg uart_uart_vrRecvBuffer_10;
  wire uart_uart_vrRecvBuffer_10_D_IN, uart_uart_vrRecvBuffer_10_EN;

  // register uart_uart_vrRecvBuffer_11
  reg uart_uart_vrRecvBuffer_11;
  wire uart_uart_vrRecvBuffer_11_D_IN, uart_uart_vrRecvBuffer_11_EN;

  // register uart_uart_vrRecvBuffer_12
  reg uart_uart_vrRecvBuffer_12;
  wire uart_uart_vrRecvBuffer_12_D_IN, uart_uart_vrRecvBuffer_12_EN;

  // register uart_uart_vrRecvBuffer_13
  reg uart_uart_vrRecvBuffer_13;
  wire uart_uart_vrRecvBuffer_13_D_IN, uart_uart_vrRecvBuffer_13_EN;

  // register uart_uart_vrRecvBuffer_14
  reg uart_uart_vrRecvBuffer_14;
  wire uart_uart_vrRecvBuffer_14_D_IN, uart_uart_vrRecvBuffer_14_EN;

  // register uart_uart_vrRecvBuffer_15
  reg uart_uart_vrRecvBuffer_15;
  wire uart_uart_vrRecvBuffer_15_D_IN, uart_uart_vrRecvBuffer_15_EN;

  // register uart_uart_vrRecvBuffer_16
  reg uart_uart_vrRecvBuffer_16;
  wire uart_uart_vrRecvBuffer_16_D_IN, uart_uart_vrRecvBuffer_16_EN;

  // register uart_uart_vrRecvBuffer_17
  reg uart_uart_vrRecvBuffer_17;
  wire uart_uart_vrRecvBuffer_17_D_IN, uart_uart_vrRecvBuffer_17_EN;

  // register uart_uart_vrRecvBuffer_18
  reg uart_uart_vrRecvBuffer_18;
  wire uart_uart_vrRecvBuffer_18_D_IN, uart_uart_vrRecvBuffer_18_EN;

  // register uart_uart_vrRecvBuffer_19
  reg uart_uart_vrRecvBuffer_19;
  wire uart_uart_vrRecvBuffer_19_D_IN, uart_uart_vrRecvBuffer_19_EN;

  // register uart_uart_vrRecvBuffer_2
  reg uart_uart_vrRecvBuffer_2;
  wire uart_uart_vrRecvBuffer_2_D_IN, uart_uart_vrRecvBuffer_2_EN;

  // register uart_uart_vrRecvBuffer_20
  reg uart_uart_vrRecvBuffer_20;
  wire uart_uart_vrRecvBuffer_20_D_IN, uart_uart_vrRecvBuffer_20_EN;

  // register uart_uart_vrRecvBuffer_21
  reg uart_uart_vrRecvBuffer_21;
  wire uart_uart_vrRecvBuffer_21_D_IN, uart_uart_vrRecvBuffer_21_EN;

  // register uart_uart_vrRecvBuffer_22
  reg uart_uart_vrRecvBuffer_22;
  wire uart_uart_vrRecvBuffer_22_D_IN, uart_uart_vrRecvBuffer_22_EN;

  // register uart_uart_vrRecvBuffer_23
  reg uart_uart_vrRecvBuffer_23;
  wire uart_uart_vrRecvBuffer_23_D_IN, uart_uart_vrRecvBuffer_23_EN;

  // register uart_uart_vrRecvBuffer_24
  reg uart_uart_vrRecvBuffer_24;
  wire uart_uart_vrRecvBuffer_24_D_IN, uart_uart_vrRecvBuffer_24_EN;

  // register uart_uart_vrRecvBuffer_25
  reg uart_uart_vrRecvBuffer_25;
  wire uart_uart_vrRecvBuffer_25_D_IN, uart_uart_vrRecvBuffer_25_EN;

  // register uart_uart_vrRecvBuffer_26
  reg uart_uart_vrRecvBuffer_26;
  wire uart_uart_vrRecvBuffer_26_D_IN, uart_uart_vrRecvBuffer_26_EN;

  // register uart_uart_vrRecvBuffer_27
  reg uart_uart_vrRecvBuffer_27;
  wire uart_uart_vrRecvBuffer_27_D_IN, uart_uart_vrRecvBuffer_27_EN;

  // register uart_uart_vrRecvBuffer_28
  reg uart_uart_vrRecvBuffer_28;
  wire uart_uart_vrRecvBuffer_28_D_IN, uart_uart_vrRecvBuffer_28_EN;

  // register uart_uart_vrRecvBuffer_29
  reg uart_uart_vrRecvBuffer_29;
  wire uart_uart_vrRecvBuffer_29_D_IN, uart_uart_vrRecvBuffer_29_EN;

  // register uart_uart_vrRecvBuffer_3
  reg uart_uart_vrRecvBuffer_3;
  wire uart_uart_vrRecvBuffer_3_D_IN, uart_uart_vrRecvBuffer_3_EN;

  // register uart_uart_vrRecvBuffer_30
  reg uart_uart_vrRecvBuffer_30;
  wire uart_uart_vrRecvBuffer_30_D_IN, uart_uart_vrRecvBuffer_30_EN;

  // register uart_uart_vrRecvBuffer_31
  reg uart_uart_vrRecvBuffer_31;
  wire uart_uart_vrRecvBuffer_31_D_IN, uart_uart_vrRecvBuffer_31_EN;

  // register uart_uart_vrRecvBuffer_4
  reg uart_uart_vrRecvBuffer_4;
  wire uart_uart_vrRecvBuffer_4_D_IN, uart_uart_vrRecvBuffer_4_EN;

  // register uart_uart_vrRecvBuffer_5
  reg uart_uart_vrRecvBuffer_5;
  wire uart_uart_vrRecvBuffer_5_D_IN, uart_uart_vrRecvBuffer_5_EN;

  // register uart_uart_vrRecvBuffer_6
  reg uart_uart_vrRecvBuffer_6;
  wire uart_uart_vrRecvBuffer_6_D_IN, uart_uart_vrRecvBuffer_6_EN;

  // register uart_uart_vrRecvBuffer_7
  reg uart_uart_vrRecvBuffer_7;
  wire uart_uart_vrRecvBuffer_7_D_IN, uart_uart_vrRecvBuffer_7_EN;

  // register uart_uart_vrRecvBuffer_8
  reg uart_uart_vrRecvBuffer_8;
  wire uart_uart_vrRecvBuffer_8_D_IN, uart_uart_vrRecvBuffer_8_EN;

  // register uart_uart_vrRecvBuffer_9
  reg uart_uart_vrRecvBuffer_9;
  wire uart_uart_vrRecvBuffer_9_D_IN, uart_uart_vrRecvBuffer_9_EN;

  // register uart_uart_vrXmitBuffer_0
  reg uart_uart_vrXmitBuffer_0;
  wire uart_uart_vrXmitBuffer_0_D_IN, uart_uart_vrXmitBuffer_0_EN;

  // register uart_uart_vrXmitBuffer_1
  reg uart_uart_vrXmitBuffer_1;
  wire uart_uart_vrXmitBuffer_1_D_IN, uart_uart_vrXmitBuffer_1_EN;

  // register uart_uart_vrXmitBuffer_10
  reg uart_uart_vrXmitBuffer_10;
  wire uart_uart_vrXmitBuffer_10_D_IN, uart_uart_vrXmitBuffer_10_EN;

  // register uart_uart_vrXmitBuffer_11
  reg uart_uart_vrXmitBuffer_11;
  wire uart_uart_vrXmitBuffer_11_D_IN, uart_uart_vrXmitBuffer_11_EN;

  // register uart_uart_vrXmitBuffer_12
  reg uart_uart_vrXmitBuffer_12;
  wire uart_uart_vrXmitBuffer_12_D_IN, uart_uart_vrXmitBuffer_12_EN;

  // register uart_uart_vrXmitBuffer_13
  reg uart_uart_vrXmitBuffer_13;
  wire uart_uart_vrXmitBuffer_13_D_IN, uart_uart_vrXmitBuffer_13_EN;

  // register uart_uart_vrXmitBuffer_14
  reg uart_uart_vrXmitBuffer_14;
  wire uart_uart_vrXmitBuffer_14_D_IN, uart_uart_vrXmitBuffer_14_EN;

  // register uart_uart_vrXmitBuffer_15
  reg uart_uart_vrXmitBuffer_15;
  wire uart_uart_vrXmitBuffer_15_D_IN, uart_uart_vrXmitBuffer_15_EN;

  // register uart_uart_vrXmitBuffer_16
  reg uart_uart_vrXmitBuffer_16;
  wire uart_uart_vrXmitBuffer_16_D_IN, uart_uart_vrXmitBuffer_16_EN;

  // register uart_uart_vrXmitBuffer_17
  reg uart_uart_vrXmitBuffer_17;
  wire uart_uart_vrXmitBuffer_17_D_IN, uart_uart_vrXmitBuffer_17_EN;

  // register uart_uart_vrXmitBuffer_18
  reg uart_uart_vrXmitBuffer_18;
  wire uart_uart_vrXmitBuffer_18_D_IN, uart_uart_vrXmitBuffer_18_EN;

  // register uart_uart_vrXmitBuffer_19
  reg uart_uart_vrXmitBuffer_19;
  wire uart_uart_vrXmitBuffer_19_D_IN, uart_uart_vrXmitBuffer_19_EN;

  // register uart_uart_vrXmitBuffer_2
  reg uart_uart_vrXmitBuffer_2;
  wire uart_uart_vrXmitBuffer_2_D_IN, uart_uart_vrXmitBuffer_2_EN;

  // register uart_uart_vrXmitBuffer_20
  reg uart_uart_vrXmitBuffer_20;
  wire uart_uart_vrXmitBuffer_20_D_IN, uart_uart_vrXmitBuffer_20_EN;

  // register uart_uart_vrXmitBuffer_21
  reg uart_uart_vrXmitBuffer_21;
  wire uart_uart_vrXmitBuffer_21_D_IN, uart_uart_vrXmitBuffer_21_EN;

  // register uart_uart_vrXmitBuffer_22
  reg uart_uart_vrXmitBuffer_22;
  wire uart_uart_vrXmitBuffer_22_D_IN, uart_uart_vrXmitBuffer_22_EN;

  // register uart_uart_vrXmitBuffer_23
  reg uart_uart_vrXmitBuffer_23;
  wire uart_uart_vrXmitBuffer_23_D_IN, uart_uart_vrXmitBuffer_23_EN;

  // register uart_uart_vrXmitBuffer_24
  reg uart_uart_vrXmitBuffer_24;
  wire uart_uart_vrXmitBuffer_24_D_IN, uart_uart_vrXmitBuffer_24_EN;

  // register uart_uart_vrXmitBuffer_25
  reg uart_uart_vrXmitBuffer_25;
  wire uart_uart_vrXmitBuffer_25_D_IN, uart_uart_vrXmitBuffer_25_EN;

  // register uart_uart_vrXmitBuffer_26
  reg uart_uart_vrXmitBuffer_26;
  wire uart_uart_vrXmitBuffer_26_D_IN, uart_uart_vrXmitBuffer_26_EN;

  // register uart_uart_vrXmitBuffer_27
  reg uart_uart_vrXmitBuffer_27;
  wire uart_uart_vrXmitBuffer_27_D_IN, uart_uart_vrXmitBuffer_27_EN;

  // register uart_uart_vrXmitBuffer_28
  reg uart_uart_vrXmitBuffer_28;
  wire uart_uart_vrXmitBuffer_28_D_IN, uart_uart_vrXmitBuffer_28_EN;

  // register uart_uart_vrXmitBuffer_29
  reg uart_uart_vrXmitBuffer_29;
  wire uart_uart_vrXmitBuffer_29_D_IN, uart_uart_vrXmitBuffer_29_EN;

  // register uart_uart_vrXmitBuffer_3
  reg uart_uart_vrXmitBuffer_3;
  wire uart_uart_vrXmitBuffer_3_D_IN, uart_uart_vrXmitBuffer_3_EN;

  // register uart_uart_vrXmitBuffer_30
  reg uart_uart_vrXmitBuffer_30;
  wire uart_uart_vrXmitBuffer_30_D_IN, uart_uart_vrXmitBuffer_30_EN;

  // register uart_uart_vrXmitBuffer_31
  reg uart_uart_vrXmitBuffer_31;
  wire uart_uart_vrXmitBuffer_31_D_IN, uart_uart_vrXmitBuffer_31_EN;

  // register uart_uart_vrXmitBuffer_4
  reg uart_uart_vrXmitBuffer_4;
  wire uart_uart_vrXmitBuffer_4_D_IN, uart_uart_vrXmitBuffer_4_EN;

  // register uart_uart_vrXmitBuffer_5
  reg uart_uart_vrXmitBuffer_5;
  wire uart_uart_vrXmitBuffer_5_D_IN, uart_uart_vrXmitBuffer_5_EN;

  // register uart_uart_vrXmitBuffer_6
  reg uart_uart_vrXmitBuffer_6;
  wire uart_uart_vrXmitBuffer_6_D_IN, uart_uart_vrXmitBuffer_6_EN;

  // register uart_uart_vrXmitBuffer_7
  reg uart_uart_vrXmitBuffer_7;
  wire uart_uart_vrXmitBuffer_7_D_IN, uart_uart_vrXmitBuffer_7_EN;

  // register uart_uart_vrXmitBuffer_8
  reg uart_uart_vrXmitBuffer_8;
  wire uart_uart_vrXmitBuffer_8_D_IN, uart_uart_vrXmitBuffer_8_EN;

  // register uart_uart_vrXmitBuffer_9
  reg uart_uart_vrXmitBuffer_9;
  wire uart_uart_vrXmitBuffer_9_D_IN, uart_uart_vrXmitBuffer_9_EN;

  // ports of submodule uart_uart_baudGen_rBaudCounter
  wire [15 : 0] uart_uart_baudGen_rBaudCounter_DATA_A,
		uart_uart_baudGen_rBaudCounter_DATA_B,
		uart_uart_baudGen_rBaudCounter_DATA_C,
		uart_uart_baudGen_rBaudCounter_DATA_F,
		uart_uart_baudGen_rBaudCounter_Q_OUT;
  wire uart_uart_baudGen_rBaudCounter_ADDA,
       uart_uart_baudGen_rBaudCounter_ADDB,
       uart_uart_baudGen_rBaudCounter_SETC,
       uart_uart_baudGen_rBaudCounter_SETF;

  // ports of submodule uart_uart_baudGen_rBaudTickCounter
  wire [2 : 0] uart_uart_baudGen_rBaudTickCounter_DATA_A,
	       uart_uart_baudGen_rBaudTickCounter_DATA_B,
	       uart_uart_baudGen_rBaudTickCounter_DATA_C,
	       uart_uart_baudGen_rBaudTickCounter_DATA_F,
	       uart_uart_baudGen_rBaudTickCounter_Q_OUT;
  wire uart_uart_baudGen_rBaudTickCounter_ADDA,
       uart_uart_baudGen_rBaudTickCounter_ADDB,
       uart_uart_baudGen_rBaudTickCounter_SETC,
       uart_uart_baudGen_rBaudTickCounter_SETF;

  // ports of submodule uart_uart_fifoRecv
  wire [31 : 0] uart_uart_fifoRecv_D_IN, uart_uart_fifoRecv_D_OUT;
  wire uart_uart_fifoRecv_CLR,
       uart_uart_fifoRecv_DEQ,
       uart_uart_fifoRecv_EMPTY_N,
       uart_uart_fifoRecv_ENQ,
       uart_uart_fifoRecv_FULL_N;

  // ports of submodule uart_uart_fifoXmit
  wire [31 : 0] uart_uart_fifoXmit_D_IN, uart_uart_fifoXmit_D_OUT;
  wire uart_uart_fifoXmit_CLR,
       uart_uart_fifoXmit_DEQ,
       uart_uart_fifoXmit_EMPTY_N,
       uart_uart_fifoXmit_ENQ,
       uart_uart_fifoXmit_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_uart_rl_send_rx_threshold,
       CAN_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick,
       CAN_FIRE_RL_uart_uart_baudGen_baud_count_wire,
       CAN_FIRE_RL_uart_uart_baudGen_baud_tick_count_wire,
       CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x,
       CAN_FIRE_RL_uart_uart_baud_generator_clock_enable,
       CAN_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter,
       CAN_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter,
       CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter,
       CAN_FIRE_RL_uart_uart_receive_bit_counter,
       CAN_FIRE_RL_uart_uart_receive_buffer_shift,
       CAN_FIRE_RL_uart_uart_receive_find_center_of_bit_cell,
       CAN_FIRE_RL_uart_uart_receive_parity_bit,
       CAN_FIRE_RL_uart_uart_receive_sample_pin,
       CAN_FIRE_RL_uart_uart_receive_stop_first_bit,
       CAN_FIRE_RL_uart_uart_receive_stop_last_bit,
       CAN_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample,
       CAN_FIRE_RL_uart_uart_receive_wait_for_start_bit,
       CAN_FIRE_RL_uart_uart_rl_delay_control,
       CAN_FIRE_RL_uart_uart_rl_update_fifo_almost_full,
       CAN_FIRE_RL_uart_uart_transmit_bit_cell_time_counter,
       CAN_FIRE_RL_uart_uart_transmit_bit_counter,
       CAN_FIRE_RL_uart_uart_transmit_buffer_load,
       CAN_FIRE_RL_uart_uart_transmit_buffer_shift,
       CAN_FIRE_RL_uart_uart_transmit_send_parity_bit,
       CAN_FIRE_RL_uart_uart_transmit_send_start_bit,
       CAN_FIRE_RL_uart_uart_transmit_send_stop_bit,
       CAN_FIRE_RL_uart_uart_transmit_send_stop_bit1_5,
       CAN_FIRE_RL_uart_uart_transmit_send_stop_bit2,
       CAN_FIRE_RL_uart_uart_transmit_shift_next_bit,
       CAN_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time,
       CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command,
       CAN_FIRE_io_sin,
       CAN_FIRE_read_req,
       CAN_FIRE_write_req,
       WILL_FIRE_RL_uart_rl_send_rx_threshold,
       WILL_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick,
       WILL_FIRE_RL_uart_uart_baudGen_baud_count_wire,
       WILL_FIRE_RL_uart_uart_baudGen_baud_tick_count_wire,
       WILL_FIRE_RL_uart_uart_baudGen_count_baudtick_16x,
       WILL_FIRE_RL_uart_uart_baud_generator_clock_enable,
       WILL_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter,
       WILL_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter,
       WILL_FIRE_RL_uart_uart_receive_bit_cell_time_counter,
       WILL_FIRE_RL_uart_uart_receive_bit_counter,
       WILL_FIRE_RL_uart_uart_receive_buffer_shift,
       WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell,
       WILL_FIRE_RL_uart_uart_receive_parity_bit,
       WILL_FIRE_RL_uart_uart_receive_sample_pin,
       WILL_FIRE_RL_uart_uart_receive_stop_first_bit,
       WILL_FIRE_RL_uart_uart_receive_stop_last_bit,
       WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample,
       WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit,
       WILL_FIRE_RL_uart_uart_rl_delay_control,
       WILL_FIRE_RL_uart_uart_rl_update_fifo_almost_full,
       WILL_FIRE_RL_uart_uart_transmit_bit_cell_time_counter,
       WILL_FIRE_RL_uart_uart_transmit_bit_counter,
       WILL_FIRE_RL_uart_uart_transmit_buffer_load,
       WILL_FIRE_RL_uart_uart_transmit_buffer_shift,
       WILL_FIRE_RL_uart_uart_transmit_send_parity_bit,
       WILL_FIRE_RL_uart_uart_transmit_send_start_bit,
       WILL_FIRE_RL_uart_uart_transmit_send_stop_bit,
       WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5,
       WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2,
       WILL_FIRE_RL_uart_uart_transmit_shift_next_bit,
       WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time,
       WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command,
       WILL_FIRE_io_sin,
       WILL_FIRE_read_req,
       WILL_FIRE_write_req;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_uart_uart_rg_delay_count_write_1__VAL_1;
  wire [3 : 0] MUX_uart_uart_error_status_register_write_1__VAL_1,
	       MUX_uart_uart_error_status_register_write_1__VAL_2,
	       MUX_uart_uart_rXmitState_write_1__VAL_2,
	       MUX_uart_uart_rXmitState_write_1__VAL_3,
	       MUX_uart_uart_rXmitState_write_1__VAL_4,
	       MUX_uart_uart_rXmitState_write_1__VAL_5,
	       MUX_uart_uart_rXmitState_write_1__VAL_6,
	       MUX_uart_uart_rXmitState_write_1__VAL_7,
	       MUX_uart_uart_rXmitState_write_1__VAL_8;
  wire [2 : 0] MUX_uart_uart_rRecvState_write_1__VAL_1,
	       MUX_uart_uart_rRecvState_write_1__VAL_2,
	       MUX_uart_uart_rRecvState_write_1__VAL_3,
	       MUX_uart_uart_rRecvState_write_1__VAL_4;
  wire MUX_uart_uart_error_status_register_write_1__SEL_1,
       MUX_uart_uart_fifo_almost_full_write_1__VAL_2,
       MUX_uart_uart_out_enable_write_1__SEL_1,
       MUX_uart_uart_rRecvState_write_1__SEL_6,
       MUX_uart_uart_rXmitDataOut_write_1__SEL_1,
       MUX_uart_uart_rXmitDataOut_write_1__SEL_4,
       MUX_uart_uart_rXmitDataOut_write_1__VAL_2,
       MUX_uart_uart_rXmitState_write_1__SEL_1,
       MUX_uart_uart_rg_delay_count_write_1__SEL_1,
       MUX_uart_uart_rg_delay_count_write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d367;
  reg TASK_testplusargs___d368;
  reg TASK_testplusargs___d369;
  reg [63 : 0] v__h37206;
  reg TASK_testplusargs___d435;
  reg TASK_testplusargs___d436;
  reg TASK_testplusargs___d437;
  reg [63 : 0] v__h42004;
  reg read_req_addr_BITS_5_TO_0_63_EQ_0x8_64_AND_TAS_ETC___d372;
  reg write_req_addr_BITS_5_TO_0_32_EQ_0x4_33_AND_TA_ETC___d440;
  // synopsys translate_on

  // remaining internal signals
  wire [63 : 0] IF_read_req_addr_BITS_5_TO_0_63_EQ_0x10_02_AND_ETC___d421,
		IF_read_req_addr_BITS_5_TO_0_63_EQ_0x14_93_AND_ETC___d423,
		IF_read_req_addr_BITS_5_TO_0_63_EQ_0x18_06_AND_ETC___d420,
		a__h37136,
		a__h37282,
		a__h37284,
		a__h37287,
		a__h37290,
		a__h37293,
		a__h37296,
		x__h36782;
  wire [31 : 0] IF_uart_uart_fifoRecv_notEmpty__65_THEN_uart_u_ETC___d391,
		bitdata__h16711,
		v__h37025;
  wire [15 : 0] x__h34396;
  wire [5 : 0] x__h12717,
	       x__h22229,
	       x__h38107,
	       y__h16476,
	       y__h16498,
	       y__h35310;
  wire [4 : 0] x_error_status__h36693;
  wire [3 : 0] x__h22203, x__h6165;
  wire [2 : 0] IF_uart_uart_rRecvBitCount_2_EQ_uart_rg_charsi_ETC___d104;
  wire NOT_uart_uart_fifoRecv_countReg_2_ULT_uart_uar_ETC___d180,
       _dand2uart_uart_pwXmitCellCountReset_EN_wset,
       uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30,
       uart_uart_rXmitBitCount_88_EQ_uart_rg_charsize_ETC___d321,
       uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301,
       uart_uart_vrRecvBuffer_0_30_XOR_uart_uart_vrRe_ETC___d169,
       x__h36180,
       z__h21237,
       z__h21244,
       z__h21251,
       z__h21258,
       z__h21265,
       z__h21272,
       z__h21279,
       z__h21286,
       z__h21293,
       z__h21300,
       z__h21307,
       z__h21314,
       z__h21321,
       z__h21328,
       z__h21335,
       z__h21342,
       z__h21349,
       z__h21356,
       z__h21363,
       z__h21370,
       z__h21377,
       z__h21384,
       z__h21391,
       z__h21398,
       z__h21405,
       z__h21412,
       z__h21419,
       z__h21426,
       z__h21433,
       z__h21440,
       z__h21447,
       z__h27502,
       z__h27509,
       z__h27516,
       z__h27523,
       z__h27530,
       z__h27537,
       z__h27544,
       z__h27551,
       z__h27558,
       z__h27565,
       z__h27572,
       z__h27579,
       z__h27586,
       z__h27593,
       z__h27600,
       z__h27607,
       z__h27614,
       z__h27621,
       z__h27628,
       z__h27635,
       z__h27642,
       z__h27649,
       z__h27656,
       z__h27663,
       z__h27670,
       z__h27677,
       z__h27684,
       z__h27691,
       z__h27698,
       z__h27705;

  // actionvalue method read_req
  assign read_req =
	     { x__h36782,
	       read_req_addr[5:0] == 6'h0C && read_req_size == 2'd1 ||
	       read_req_addr[5:0] == 6'h08 ||
	       read_req_addr[5:0] == 6'h14 && read_req_size == 2'd1 ||
	       read_req_addr[5:0] == 6'h0 ||
	       read_req_addr[5:0] == 6'h10 && read_req_size == 2'd1 ||
	       read_req_addr[5:0] == 6'h18 && read_req_size == 2'd1 ||
	       read_req_addr[5:0] == 6'h20 && read_req_size == 2'd0 } ;
  assign RDY_read_req = 1'd1 ;
  assign CAN_FIRE_read_req = 1'd1 ;
  assign WILL_FIRE_read_req = EN_read_req ;

  // actionvalue method write_req
  assign write_req =
	     write_req_addr[5:0] == 6'h04 ||
	     write_req_addr[5:0] == 6'h0 && write_req_size == 2'd1 ||
	     write_req_addr[5:0] == 6'h10 && write_req_size == 2'd1 ||
	     write_req_addr[5:0] == 6'h14 && write_req_size == 2'd1 ||
	     write_req_addr[5:0] == 6'h18 && write_req_size == 2'd1 ||
	     write_req_addr[5:0] == 6'h0C && write_req_size == 2'd1 ||
	     write_req_addr[5:0] == 6'h20 && write_req_size == 2'd0 ;
  assign RDY_write_req = 1'd1 ;
  assign CAN_FIRE_write_req = 1'd1 ;
  assign WILL_FIRE_write_req = EN_write_req ;

  // action method io_sin
  assign CAN_FIRE_io_sin = 1'd1 ;
  assign WILL_FIRE_io_sin = 1'd1 ;

  // value method io_sout
  assign io_SOUT = uart_uart_rXmitDataOut ;

  // value method io_sout_en
  assign io_SOUT_EN = uart_uart_out_enable ;

  // value method interrupt
  assign interrupt = 1'bx /* unspecified value */  ;

  // submodule uart_uart_baudGen_rBaudCounter
  Counter #(.width(32'd16),
	    .init(16'd0)) uart_uart_baudGen_rBaudCounter(.CLK(CLK),
							 .RST(RST_N),
							 .DATA_A(uart_uart_baudGen_rBaudCounter_DATA_A),
							 .DATA_B(uart_uart_baudGen_rBaudCounter_DATA_B),
							 .DATA_C(uart_uart_baudGen_rBaudCounter_DATA_C),
							 .DATA_F(uart_uart_baudGen_rBaudCounter_DATA_F),
							 .ADDA(uart_uart_baudGen_rBaudCounter_ADDA),
							 .ADDB(uart_uart_baudGen_rBaudCounter_ADDB),
							 .SETC(uart_uart_baudGen_rBaudCounter_SETC),
							 .SETF(uart_uart_baudGen_rBaudCounter_SETF),
							 .Q_OUT(uart_uart_baudGen_rBaudCounter_Q_OUT));

  // submodule uart_uart_baudGen_rBaudTickCounter
  Counter #(.width(32'd3),
	    .init(3'd0)) uart_uart_baudGen_rBaudTickCounter(.CLK(CLK),
							    .RST(RST_N),
							    .DATA_A(uart_uart_baudGen_rBaudTickCounter_DATA_A),
							    .DATA_B(uart_uart_baudGen_rBaudTickCounter_DATA_B),
							    .DATA_C(uart_uart_baudGen_rBaudTickCounter_DATA_C),
							    .DATA_F(uart_uart_baudGen_rBaudTickCounter_DATA_F),
							    .ADDA(uart_uart_baudGen_rBaudTickCounter_ADDA),
							    .ADDB(uart_uart_baudGen_rBaudTickCounter_ADDB),
							    .SETC(uart_uart_baudGen_rBaudTickCounter_SETC),
							    .SETF(uart_uart_baudGen_rBaudTickCounter_SETF),
							    .Q_OUT(uart_uart_baudGen_rBaudTickCounter_Q_OUT));

  // submodule uart_uart_fifoRecv
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_uart_fifoRecv(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(uart_uart_fifoRecv_D_IN),
						 .ENQ(uart_uart_fifoRecv_ENQ),
						 .DEQ(uart_uart_fifoRecv_DEQ),
						 .CLR(uart_uart_fifoRecv_CLR),
						 .D_OUT(uart_uart_fifoRecv_D_OUT),
						 .FULL_N(uart_uart_fifoRecv_FULL_N),
						 .EMPTY_N(uart_uart_fifoRecv_EMPTY_N));

  // submodule uart_uart_fifoXmit
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_uart_fifoXmit(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(uart_uart_fifoXmit_D_IN),
						 .ENQ(uart_uart_fifoXmit_ENQ),
						 .DEQ(uart_uart_fifoXmit_DEQ),
						 .CLR(uart_uart_fifoXmit_CLR),
						 .D_OUT(uart_uart_fifoXmit_D_OUT),
						 .FULL_N(uart_uart_fifoXmit_FULL_N),
						 .EMPTY_N(uart_uart_fifoXmit_EMPTY_N));

  // rule RL_uart_rl_send_rx_threshold
  assign CAN_FIRE_RL_uart_rl_send_rx_threshold = 1'd1 ;
  assign WILL_FIRE_RL_uart_rl_send_rx_threshold = 1'd1 ;

  // rule RL_uart_uart_baudGen_baud_count_wire
  assign CAN_FIRE_RL_uart_uart_baudGen_baud_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_baudGen_baud_count_wire = 1'd1 ;

  // rule RL_uart_uart_baud_generator_clock_enable
  assign CAN_FIRE_RL_uart_uart_baud_generator_clock_enable = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_baud_generator_clock_enable = 1'd1 ;

  // rule RL_uart_uart_receive_wait_for_start_bit
  assign CAN_FIRE_RL_uart_uart_receive_wait_for_start_bit =
	     uart_uart_rRecvState == 3'd0 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit =
	     CAN_FIRE_RL_uart_uart_receive_wait_for_start_bit ;

  // rule RL_uart_uart_receive_find_center_of_bit_cell
  assign CAN_FIRE_RL_uart_uart_receive_find_center_of_bit_cell =
	     uart_uart_rRecvState == 3'd1 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell =
	     CAN_FIRE_RL_uart_uart_receive_find_center_of_bit_cell ;

  // rule RL_uart_uart_receive_wait_bit_cell_time_for_sample
  assign CAN_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample =
	     uart_uart_rRecvState == 3'd2 &&
	     uart_uart_rRecvCellCount == 4'hF &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample =
	     CAN_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample ;

  // rule RL_uart_uart_receive_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_uart_receive_sample_pin
  assign CAN_FIRE_RL_uart_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;
  assign WILL_FIRE_RL_uart_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // rule RL_uart_uart_receive_parity_bit
  assign CAN_FIRE_RL_uart_uart_receive_parity_bit =
	     uart_uart_rRecvState == 3'd4 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_parity_bit =
	     CAN_FIRE_RL_uart_uart_receive_parity_bit ;

  // rule RL_uart_uart_receive_stop_first_bit
  assign CAN_FIRE_RL_uart_uart_receive_stop_first_bit =
	     uart_uart_rRecvState == 3'd5 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_stop_first_bit =
	     CAN_FIRE_RL_uart_uart_receive_stop_first_bit ;

  // rule RL_uart_uart_receive_bit_counter
  assign CAN_FIRE_RL_uart_uart_receive_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_receive_bit_counter = 1'd1 ;

  // rule RL_uart_uart_receive_stop_last_bit
  assign CAN_FIRE_RL_uart_uart_receive_stop_last_bit =
	     uart_uart_rRecvState == 3'd6 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_stop_last_bit =
	     CAN_FIRE_RL_uart_uart_receive_stop_last_bit && !EN_read_req ;

  // rule RL_uart_uart_receive_buffer_shift
  assign CAN_FIRE_RL_uart_uart_receive_buffer_shift =
	     uart_uart_rRecvState == 3'd3 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_receive_buffer_shift =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // rule RL_uart_uart_transmit_wait_for_start_command
  assign CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command =
	     uart_uart_rXmitState == 4'd0 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command =
	     CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command ;

  // rule RL_uart_uart_rl_delay_control
  assign CAN_FIRE_RL_uart_uart_rl_delay_control =
	     uart_uart_rXmitState == 4'd1 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_rl_delay_control =
	     CAN_FIRE_RL_uart_uart_rl_delay_control ;

  // rule RL_uart_uart_transmit_send_start_bit
  assign CAN_FIRE_RL_uart_uart_transmit_send_start_bit =
	     uart_uart_rXmitState == 4'd2 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_start_bit =
	     CAN_FIRE_RL_uart_uart_transmit_send_start_bit ;

  // rule RL_uart_uart_transmit_wait_1_bit_cell_time
  assign CAN_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time =
	     uart_uart_rXmitState == 4'd3 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time =
	     CAN_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ;

  // rule RL_uart_uart_transmit_bit_counter
  assign CAN_FIRE_RL_uart_uart_transmit_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_transmit_bit_counter = 1'd1 ;

  // rule RL_uart_uart_transmit_shift_next_bit
  assign CAN_FIRE_RL_uart_uart_transmit_shift_next_bit =
	     uart_uart_rXmitState == 4'd4 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_shift_next_bit =
	     CAN_FIRE_RL_uart_uart_transmit_shift_next_bit ;

  // rule RL_uart_uart_transmit_buffer_shift
  assign CAN_FIRE_RL_uart_uart_transmit_buffer_shift =
	     !uart_uart_pwXmitLoadBuffer_whas &&
	     CAN_FIRE_RL_uart_uart_transmit_shift_next_bit ;
  assign WILL_FIRE_RL_uart_uart_transmit_buffer_shift =
	     CAN_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // rule RL_uart_uart_transmit_send_parity_bit
  assign CAN_FIRE_RL_uart_uart_transmit_send_parity_bit =
	     uart_uart_rXmitState == 4'd8 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_parity_bit =
	     CAN_FIRE_RL_uart_uart_transmit_send_parity_bit ;

  // rule RL_uart_uart_transmit_buffer_load
  assign CAN_FIRE_RL_uart_uart_transmit_buffer_load =
	     uart_uart_fifoXmit_EMPTY_N && uart_uart_pwXmitLoadBuffer_whas ;
  assign WILL_FIRE_RL_uart_uart_transmit_buffer_load =
	     CAN_FIRE_RL_uart_uart_transmit_buffer_load ;

  // rule RL_uart_uart_transmit_send_stop_bit
  assign CAN_FIRE_RL_uart_uart_transmit_send_stop_bit =
	     uart_uart_rXmitState == 4'd5 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_stop_bit =
	     CAN_FIRE_RL_uart_uart_transmit_send_stop_bit ;

  // rule RL_uart_uart_rl_update_fifo_almost_full
  assign CAN_FIRE_RL_uart_uart_rl_update_fifo_almost_full = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_rl_update_fifo_almost_full = 1'd1 ;

  // rule RL_uart_uart_transmit_send_stop_bit1_5
  assign CAN_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 =
	     uart_uart_rXmitState == 4'd6 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 =
	     CAN_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ;

  // rule RL_uart_uart_transmit_send_stop_bit2
  assign CAN_FIRE_RL_uart_uart_transmit_send_stop_bit2 =
	     uart_uart_rXmitState == 4'd7 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 =
	     CAN_FIRE_RL_uart_uart_transmit_send_stop_bit2 ;

  // rule RL_uart_uart_transmit_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_uart_baudGen_baud_tick_count_wire
  assign CAN_FIRE_RL_uart_uart_baudGen_baud_tick_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_baudGen_baud_tick_count_wire = 1'd1 ;

  // rule RL_uart_uart_baudGen_assert_2x_baud_tick
  assign CAN_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick =
	     uart_uart_baudGen_rBaudTickCounter_Q_OUT == 3'd0 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick =
	     CAN_FIRE_RL_uart_uart_baudGen_assert_2x_baud_tick ;

  // rule RL_uart_uart_baudGen_count_baudtick_16x
  assign CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x =
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign WILL_FIRE_RL_uart_uart_baudGen_count_baudtick_16x =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_uart_fifoRecv__updateLevelCounter
  assign CAN_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter =
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit !=
	     uart_uart_fifoRecv_r_deq_whas ;
  assign WILL_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter ;

  // rule RL_uart_uart_fifoXmit__updateLevelCounter
  assign CAN_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter =
	     uart_uart_fifoXmit_r_enq_whas !=
	     CAN_FIRE_RL_uart_uart_transmit_buffer_load ;
  assign WILL_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter ;

  // inputs to muxes for submodule ports
  assign MUX_uart_uart_error_status_register_write_1__SEL_1 =
	     EN_write_req && write_req_addr[5:0] == 6'h0C &&
	     write_req_size == 2'd1 ;
  assign MUX_uart_uart_out_enable_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     !uart_uart_fifoXmit_EMPTY_N &&
	     uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ;
  assign MUX_uart_uart_rRecvState_write_1__SEL_6 =
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ;
  assign MUX_uart_uart_rXmitDataOut_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ;
  assign MUX_uart_uart_rXmitDataOut_write_1__SEL_4 =
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ;
  assign MUX_uart_uart_rXmitState_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ;
  assign MUX_uart_uart_rg_delay_count_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     (uart_uart_fifoXmit_EMPTY_N ||
	      uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ||
	      uart_uart_out_enable) ;
  assign MUX_uart_uart_rg_delay_count_write_1__SEL_2 =
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     !uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ;
  assign MUX_uart_uart_error_status_register_write_1__VAL_1 =
	     uart_uart_error_status_register & write_req_data[7:4] ;
  assign MUX_uart_uart_error_status_register_write_1__VAL_2 =
	     { bitdata__h16711 == 32'd0 && !uart_uart_rRecvData,
	       !uart_uart_rRecvData,
	       !uart_uart_fifoRecv_FULL_N,
	       uart_rg_parity == 2'd1 &&
	       !uart_uart_vrRecvBuffer_0_30_XOR_uart_uart_vrRe_ETC___d169 ||
	       uart_rg_parity == 2'd2 &&
	       uart_uart_vrRecvBuffer_0_30_XOR_uart_uart_vrRe_ETC___d169 } ;
  assign MUX_uart_uart_fifo_almost_full_write_1__VAL_2 =
	     uart_uart_fifo_almost_full & write_req_data[8] ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_1 =
	     uart_uart_rRecvData ? 3'd0 : 3'd1 ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_2 =
	     (uart_uart_rRecvCellCount == 4'h4) ?
	       (uart_uart_rRecvData ? 3'd0 : 3'd2) :
	       3'd1 ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_3 =
	     (uart_uart_rRecvBitCount == uart_rg_charsize) ?
	       ((uart_rg_parity == 2'd0) ?
		  ((uart_rg_stopbits == 2'd0) ? 3'd6 : 3'd5) :
		  3'd4) :
	       IF_uart_uart_rRecvBitCount_2_EQ_uart_rg_charsi_ETC___d104 ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_4 =
	     uart_uart_rRecvData ? 3'd2 : 3'd0 ;
  assign MUX_uart_uart_rXmitDataOut_write_1__VAL_2 =
	     (uart_rg_parity == 2'd1) ?
	       x__h36180 :
	       uart_rg_parity == 2'd2 && uart_uart_rXmitParity ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_2 =
	     uart_uart_fifoXmit_EMPTY_N ?
	       (uart_uart_out_enable ? 4'd2 : 4'd1) :
	       4'd0 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_3 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 4'd3 : 4'd2 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_4 =
	     (uart_uart_rXmitCellCount == 4'hF) ?
	       ((uart_uart_rXmitBitCount_88_EQ_uart_rg_charsize_ETC___d321 &&
		 uart_rg_parity == 2'd0) ?
		  4'd5 :
		  ((uart_uart_rXmitBitCount_88_EQ_uart_rg_charsize_ETC___d321 &&
		    uart_rg_parity != 2'd0) ?
		     4'd8 :
		     4'd4)) :
	       4'd3 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_5 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 4'd5 : 4'd8 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_6 =
	     (uart_uart_rXmitCellCount == 4'hF && uart_rg_stopbits == 2'd0) ?
	       4'd0 :
	       ((uart_uart_rXmitCellCount == 4'hF &&
		 uart_rg_stopbits == 2'd2) ?
		  4'd7 :
		  ((uart_uart_rXmitCellCount == 4'hF &&
		    uart_rg_stopbits == 2'd1) ?
		     4'd6 :
		     4'd5)) ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_7 =
	     (uart_uart_rXmitCellCount == 4'h7) ? 4'd0 : 4'd6 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_8 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 4'd0 : 4'd7 ;
  assign MUX_uart_uart_rg_delay_count_write_1__VAL_1 =
	     (uart_uart_fifoXmit_EMPTY_N ||
	      uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301) ?
	       16'd0 :
	       x__h34396 ;

  // inlined wires
  assign uart_uart_fifoRecv_r_deq_whas =
	     EN_read_req && read_req_addr[5:0] == 6'h08 &&
	     uart_uart_fifoRecv_EMPTY_N ;
  assign uart_uart_pwRecvCellCountReset_whas =
	     WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell &&
	     uart_uart_rRecvCellCount == 4'h4 ||
	     WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit ;
  assign uart_uart_pwRecvResetBitCount_whas =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     uart_uart_rRecvData ;
  assign uart_uart_pwRecvEnableBitCount_whas =
	     WILL_FIRE_RL_uart_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ;
  assign uart_uart_fifoXmit_r_enq_whas =
	     EN_write_req && write_req_addr[5:0] == 6'h04 ;
  assign uart_uart_pwXmitCellCountReset_whas =
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ||
	     _dand2uart_uart_pwXmitCellCountReset_EN_wset ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 &&
	     uart_uart_rXmitCellCount == 4'h7 ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     uart_uart_fifoXmit_EMPTY_N &&
	     uart_uart_out_enable ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit &&
	     uart_uart_rXmitCellCount == 4'hF &&
	     (uart_rg_stopbits == 2'd0 || uart_rg_stopbits == 2'd2 ||
	      uart_rg_stopbits == 2'd1) ;
  assign uart_uart_pwXmitResetBitCount_whas =
	     WILL_FIRE_RL_uart_uart_rl_delay_control ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ;
  assign uart_uart_pwXmitEnableBitCount_whas =
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time &&
	     uart_uart_rXmitCellCount == 4'hF &&
	     (!uart_uart_rXmitBitCount_88_EQ_uart_rg_charsize_ETC___d321 ||
	      uart_rg_parity != 2'd0) &&
	     (!uart_uart_rXmitBitCount_88_EQ_uart_rg_charsize_ETC___d321 ||
	      uart_rg_parity == 2'd0) ;
  assign uart_uart_pwXmitLoadBuffer_whas =
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     uart_uart_fifoXmit_EMPTY_N &&
	     uart_uart_out_enable ;

  // register uart_baud_value
  assign uart_baud_value_D_IN = write_req_data[15:0] ;
  assign uart_baud_value_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h0 &&
	     write_req_size == 2'd1 ;

  // register uart_rg_charsize
  assign uart_rg_charsize_D_IN = write_req_data[10:5] ;
  assign uart_rg_charsize_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h14 &&
	     write_req_size == 2'd1 ;

  // register uart_rg_delay_control
  assign uart_rg_delay_control_D_IN = write_req_data[15:0] ;
  assign uart_rg_delay_control_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h10 &&
	     write_req_size == 2'd1 ;

  // register uart_rg_interrupt_en
  assign uart_rg_interrupt_en_D_IN = { 7'd0, write_req_data[8:0] } ;
  assign uart_rg_interrupt_en_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h18 &&
	     write_req_size == 2'd1 ;

  // register uart_rg_parity
  assign uart_rg_parity_D_IN = write_req_data[4:3] ;
  assign uart_rg_parity_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h14 &&
	     write_req_size == 2'd1 ;

  // register uart_rg_rx_threshold
  assign uart_rg_rx_threshold_D_IN = write_req_data[4:0] ;
  assign uart_rg_rx_threshold_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h20 &&
	     write_req_size == 2'd0 ;

  // register uart_rg_stopbits
  assign uart_rg_stopbits_D_IN = write_req_data[2:1] ;
  assign uart_rg_stopbits_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h14 &&
	     write_req_size == 2'd1 ;

  // register uart_uart_error_status_register
  assign uart_uart_error_status_register_D_IN =
	     MUX_uart_uart_error_status_register_write_1__SEL_1 ?
	       MUX_uart_uart_error_status_register_write_1__VAL_1 :
	       MUX_uart_uart_error_status_register_write_1__VAL_2 ;
  assign uart_uart_error_status_register_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h0C &&
	     write_req_size == 2'd1 ||
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit ;

  // register uart_uart_fifoRecv_countReg
  assign uart_uart_fifoRecv_countReg_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit ?
	       uart_uart_fifoRecv_countReg + 5'd1 :
	       uart_uart_fifoRecv_countReg - 5'd1 ;
  assign uart_uart_fifoRecv_countReg_EN =
	     CAN_FIRE_RL_uart_uart_fifoRecv__updateLevelCounter ;

  // register uart_uart_fifoXmit_countReg
  assign uart_uart_fifoXmit_countReg_D_IN =
	     uart_uart_fifoXmit_r_enq_whas ?
	       uart_uart_fifoXmit_countReg + 5'd1 :
	       uart_uart_fifoXmit_countReg - 5'd1 ;
  assign uart_uart_fifoXmit_countReg_EN =
	     CAN_FIRE_RL_uart_uart_fifoXmit__updateLevelCounter ;

  // register uart_uart_fifo_almost_full
  assign uart_uart_fifo_almost_full_D_IN =
	     NOT_uart_uart_fifoRecv_countReg_2_ULT_uart_uar_ETC___d180 ||
	     MUX_uart_uart_fifo_almost_full_write_1__VAL_2 ;
  assign uart_uart_fifo_almost_full_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h0C &&
	     write_req_size == 2'd1 ||
	     NOT_uart_uart_fifoRecv_countReg_2_ULT_uart_uar_ETC___d180 ;

  // register uart_uart_out_enable
  assign uart_uart_out_enable_D_IN =
	     !MUX_uart_uart_out_enable_write_1__SEL_1 ;
  assign uart_uart_out_enable_EN =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     !uart_uart_fifoXmit_EMPTY_N &&
	     uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ||
	     WILL_FIRE_RL_uart_uart_rl_delay_control ;

  // register uart_uart_rRecvBitCount
  assign uart_uart_rRecvBitCount_D_IN =
	     uart_uart_pwRecvResetBitCount_whas ? 6'd0 : x__h12717 ;
  assign uart_uart_rRecvBitCount_EN =
	     uart_uart_pwRecvResetBitCount_whas ||
	     uart_uart_pwRecvEnableBitCount_whas ;

  // register uart_uart_rRecvCellCount
  assign uart_uart_rRecvCellCount_D_IN =
	     uart_uart_pwRecvCellCountReset_whas ? 4'd0 : x__h6165 ;
  assign uart_uart_rRecvCellCount_EN =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // register uart_uart_rRecvData
  assign uart_uart_rRecvData_D_IN = io_SIN ;
  assign uart_uart_rRecvData_EN = 1'd1 ;

  // register uart_uart_rRecvParity
  assign uart_uart_rRecvParity_D_IN = uart_uart_rRecvData ;
  assign uart_uart_rRecvParity_EN = CAN_FIRE_RL_uart_uart_receive_parity_bit ;

  // register uart_uart_rRecvState
  always@(WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit or
	  MUX_uart_uart_rRecvState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell or
	  MUX_uart_uart_rRecvState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample or
	  MUX_uart_uart_rRecvState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_uart_receive_stop_first_bit or
	  MUX_uart_uart_rRecvState_write_1__VAL_4 or
	  WILL_FIRE_RL_uart_uart_receive_stop_last_bit or
	  MUX_uart_uart_rRecvState_write_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_1;
      WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_2;
      WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_3;
      WILL_FIRE_RL_uart_uart_receive_stop_first_bit:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_4;
      WILL_FIRE_RL_uart_uart_receive_stop_last_bit:
	  uart_uart_rRecvState_D_IN = 3'd0;
      MUX_uart_uart_rRecvState_write_1__SEL_6:
	  uart_uart_rRecvState_D_IN = 3'd2;
      default: uart_uart_rRecvState_D_IN = 3'bxxx /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rRecvState_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit ||
	     WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell ||
	     WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ;

  // register uart_uart_rXmitBitCount
  assign uart_uart_rXmitBitCount_D_IN =
	     uart_uart_pwXmitResetBitCount_whas ? 6'd0 : x__h22229 ;
  assign uart_uart_rXmitBitCount_EN =
	     uart_uart_pwXmitResetBitCount_whas ||
	     uart_uart_pwXmitEnableBitCount_whas ;

  // register uart_uart_rXmitCellCount
  assign uart_uart_rXmitCellCount_D_IN =
	     uart_uart_pwXmitCellCountReset_whas ? 4'd0 : x__h22203 ;
  assign uart_uart_rXmitCellCount_EN =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // register uart_uart_rXmitDataOut
  always@(MUX_uart_uart_rXmitDataOut_write_1__SEL_1 or
	  uart_uart_vrXmitBuffer_0 or
	  WILL_FIRE_RL_uart_uart_transmit_send_parity_bit or
	  MUX_uart_uart_rXmitDataOut_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_uart_transmit_send_start_bit or
	  MUX_uart_uart_rXmitDataOut_write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_uart_rXmitDataOut_write_1__SEL_1:
	  uart_uart_rXmitDataOut_D_IN = uart_uart_vrXmitBuffer_0;
      WILL_FIRE_RL_uart_uart_transmit_send_parity_bit:
	  uart_uart_rXmitDataOut_D_IN =
	      MUX_uart_uart_rXmitDataOut_write_1__VAL_2;
      WILL_FIRE_RL_uart_uart_transmit_send_start_bit:
	  uart_uart_rXmitDataOut_D_IN = 1'b0;
      MUX_uart_uart_rXmitDataOut_write_1__SEL_4:
	  uart_uart_rXmitDataOut_D_IN = 1'b1;
      default: uart_uart_rXmitDataOut_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rXmitDataOut_EN =
	     WILL_FIRE_RL_uart_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ;

  // register uart_uart_rXmitParity
  assign uart_uart_rXmitParity_D_IN =
	     z__h27705 ^ uart_uart_fifoXmit_D_OUT[31] ;
  assign uart_uart_rXmitParity_EN =
	     CAN_FIRE_RL_uart_uart_transmit_buffer_load ;

  // register uart_uart_rXmitState
  always@(MUX_uart_uart_rXmitState_write_1__SEL_1 or
	  WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command or
	  MUX_uart_uart_rXmitState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_uart_transmit_send_start_bit or
	  MUX_uart_uart_rXmitState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time or
	  MUX_uart_uart_rXmitState_write_1__VAL_4 or
	  WILL_FIRE_RL_uart_uart_transmit_send_parity_bit or
	  MUX_uart_uart_rXmitState_write_1__VAL_5 or
	  WILL_FIRE_RL_uart_uart_transmit_send_stop_bit or
	  MUX_uart_uart_rXmitState_write_1__VAL_6 or
	  WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 or
	  MUX_uart_uart_rXmitState_write_1__VAL_7 or
	  WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 or
	  MUX_uart_uart_rXmitState_write_1__VAL_8 or
	  WILL_FIRE_RL_uart_uart_transmit_shift_next_bit)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_uart_rXmitState_write_1__SEL_1:
	  uart_uart_rXmitState_D_IN = 4'd2;
      WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_2;
      WILL_FIRE_RL_uart_uart_transmit_send_start_bit:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_3;
      WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_4;
      WILL_FIRE_RL_uart_uart_transmit_send_parity_bit:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_5;
      WILL_FIRE_RL_uart_uart_transmit_send_stop_bit:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_6;
      WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_7;
      WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_8;
      WILL_FIRE_RL_uart_uart_transmit_shift_next_bit:
	  uart_uart_rXmitState_D_IN = 4'd3;
      default: uart_uart_rXmitState_D_IN = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rXmitState_EN =
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_shift_next_bit ;

  // register uart_uart_rg_delay_count
  always@(MUX_uart_uart_rg_delay_count_write_1__SEL_1 or
	  MUX_uart_uart_rg_delay_count_write_1__VAL_1 or
	  MUX_uart_uart_rg_delay_count_write_1__SEL_2 or
	  x__h34396 or WILL_FIRE_RL_uart_uart_transmit_send_start_bit)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_uart_rg_delay_count_write_1__SEL_1:
	  uart_uart_rg_delay_count_D_IN =
	      MUX_uart_uart_rg_delay_count_write_1__VAL_1;
      MUX_uart_uart_rg_delay_count_write_1__SEL_2:
	  uart_uart_rg_delay_count_D_IN = x__h34396;
      WILL_FIRE_RL_uart_uart_transmit_send_start_bit:
	  uart_uart_rg_delay_count_D_IN = 16'd0;
      default: uart_uart_rg_delay_count_D_IN =
		   16'bxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rg_delay_count_EN =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     (uart_uart_fifoXmit_EMPTY_N ||
	      uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ||
	      uart_uart_out_enable) ||
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     !uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ;

  // register uart_uart_vrRecvBuffer_0
  assign uart_uart_vrRecvBuffer_0_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_1 ;
  assign uart_uart_vrRecvBuffer_0_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_1
  assign uart_uart_vrRecvBuffer_1_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_2 ;
  assign uart_uart_vrRecvBuffer_1_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_10
  assign uart_uart_vrRecvBuffer_10_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_11 ;
  assign uart_uart_vrRecvBuffer_10_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_11
  assign uart_uart_vrRecvBuffer_11_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_12 ;
  assign uart_uart_vrRecvBuffer_11_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_12
  assign uart_uart_vrRecvBuffer_12_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_13 ;
  assign uart_uart_vrRecvBuffer_12_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_13
  assign uart_uart_vrRecvBuffer_13_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_14 ;
  assign uart_uart_vrRecvBuffer_13_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_14
  assign uart_uart_vrRecvBuffer_14_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_15 ;
  assign uart_uart_vrRecvBuffer_14_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_15
  assign uart_uart_vrRecvBuffer_15_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_16 ;
  assign uart_uart_vrRecvBuffer_15_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_16
  assign uart_uart_vrRecvBuffer_16_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_17 ;
  assign uart_uart_vrRecvBuffer_16_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_17
  assign uart_uart_vrRecvBuffer_17_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_18 ;
  assign uart_uart_vrRecvBuffer_17_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_18
  assign uart_uart_vrRecvBuffer_18_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_19 ;
  assign uart_uart_vrRecvBuffer_18_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_19
  assign uart_uart_vrRecvBuffer_19_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_20 ;
  assign uart_uart_vrRecvBuffer_19_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_2
  assign uart_uart_vrRecvBuffer_2_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_3 ;
  assign uart_uart_vrRecvBuffer_2_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_20
  assign uart_uart_vrRecvBuffer_20_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_21 ;
  assign uart_uart_vrRecvBuffer_20_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_21
  assign uart_uart_vrRecvBuffer_21_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_22 ;
  assign uart_uart_vrRecvBuffer_21_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_22
  assign uart_uart_vrRecvBuffer_22_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_23 ;
  assign uart_uart_vrRecvBuffer_22_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_23
  assign uart_uart_vrRecvBuffer_23_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_24 ;
  assign uart_uart_vrRecvBuffer_23_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_24
  assign uart_uart_vrRecvBuffer_24_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_25 ;
  assign uart_uart_vrRecvBuffer_24_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_25
  assign uart_uart_vrRecvBuffer_25_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_26 ;
  assign uart_uart_vrRecvBuffer_25_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_26
  assign uart_uart_vrRecvBuffer_26_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_27 ;
  assign uart_uart_vrRecvBuffer_26_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_27
  assign uart_uart_vrRecvBuffer_27_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_28 ;
  assign uart_uart_vrRecvBuffer_27_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_28
  assign uart_uart_vrRecvBuffer_28_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_29 ;
  assign uart_uart_vrRecvBuffer_28_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_29
  assign uart_uart_vrRecvBuffer_29_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_30 ;
  assign uart_uart_vrRecvBuffer_29_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_3
  assign uart_uart_vrRecvBuffer_3_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_4 ;
  assign uart_uart_vrRecvBuffer_3_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_30
  assign uart_uart_vrRecvBuffer_30_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_31 ;
  assign uart_uart_vrRecvBuffer_30_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_31
  assign uart_uart_vrRecvBuffer_31_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_rRecvData ;
  assign uart_uart_vrRecvBuffer_31_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_4
  assign uart_uart_vrRecvBuffer_4_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_5 ;
  assign uart_uart_vrRecvBuffer_4_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_5
  assign uart_uart_vrRecvBuffer_5_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_6 ;
  assign uart_uart_vrRecvBuffer_5_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_6
  assign uart_uart_vrRecvBuffer_6_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_7 ;
  assign uart_uart_vrRecvBuffer_6_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_7
  assign uart_uart_vrRecvBuffer_7_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_8 ;
  assign uart_uart_vrRecvBuffer_7_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_8
  assign uart_uart_vrRecvBuffer_8_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_9 ;
  assign uart_uart_vrRecvBuffer_8_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_9
  assign uart_uart_vrRecvBuffer_9_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_10 ;
  assign uart_uart_vrRecvBuffer_9_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrXmitBuffer_0
  assign uart_uart_vrXmitBuffer_0_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[0] :
	       uart_uart_vrXmitBuffer_1 ;
  assign uart_uart_vrXmitBuffer_0_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_1
  assign uart_uart_vrXmitBuffer_1_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[1] :
	       uart_uart_vrXmitBuffer_2 ;
  assign uart_uart_vrXmitBuffer_1_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_10
  assign uart_uart_vrXmitBuffer_10_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[10] :
	       uart_uart_vrXmitBuffer_11 ;
  assign uart_uart_vrXmitBuffer_10_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_11
  assign uart_uart_vrXmitBuffer_11_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[11] :
	       uart_uart_vrXmitBuffer_12 ;
  assign uart_uart_vrXmitBuffer_11_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_12
  assign uart_uart_vrXmitBuffer_12_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[12] :
	       uart_uart_vrXmitBuffer_13 ;
  assign uart_uart_vrXmitBuffer_12_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_13
  assign uart_uart_vrXmitBuffer_13_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[13] :
	       uart_uart_vrXmitBuffer_14 ;
  assign uart_uart_vrXmitBuffer_13_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_14
  assign uart_uart_vrXmitBuffer_14_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[14] :
	       uart_uart_vrXmitBuffer_15 ;
  assign uart_uart_vrXmitBuffer_14_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_15
  assign uart_uart_vrXmitBuffer_15_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[15] :
	       uart_uart_vrXmitBuffer_16 ;
  assign uart_uart_vrXmitBuffer_15_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_16
  assign uart_uart_vrXmitBuffer_16_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[16] :
	       uart_uart_vrXmitBuffer_17 ;
  assign uart_uart_vrXmitBuffer_16_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_17
  assign uart_uart_vrXmitBuffer_17_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[17] :
	       uart_uart_vrXmitBuffer_18 ;
  assign uart_uart_vrXmitBuffer_17_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_18
  assign uart_uart_vrXmitBuffer_18_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[18] :
	       uart_uart_vrXmitBuffer_19 ;
  assign uart_uart_vrXmitBuffer_18_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_19
  assign uart_uart_vrXmitBuffer_19_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[19] :
	       uart_uart_vrXmitBuffer_20 ;
  assign uart_uart_vrXmitBuffer_19_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_2
  assign uart_uart_vrXmitBuffer_2_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[2] :
	       uart_uart_vrXmitBuffer_3 ;
  assign uart_uart_vrXmitBuffer_2_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_20
  assign uart_uart_vrXmitBuffer_20_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[20] :
	       uart_uart_vrXmitBuffer_21 ;
  assign uart_uart_vrXmitBuffer_20_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_21
  assign uart_uart_vrXmitBuffer_21_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[21] :
	       uart_uart_vrXmitBuffer_22 ;
  assign uart_uart_vrXmitBuffer_21_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_22
  assign uart_uart_vrXmitBuffer_22_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[22] :
	       uart_uart_vrXmitBuffer_23 ;
  assign uart_uart_vrXmitBuffer_22_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_23
  assign uart_uart_vrXmitBuffer_23_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[23] :
	       uart_uart_vrXmitBuffer_24 ;
  assign uart_uart_vrXmitBuffer_23_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_24
  assign uart_uart_vrXmitBuffer_24_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[24] :
	       uart_uart_vrXmitBuffer_25 ;
  assign uart_uart_vrXmitBuffer_24_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_25
  assign uart_uart_vrXmitBuffer_25_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[25] :
	       uart_uart_vrXmitBuffer_26 ;
  assign uart_uart_vrXmitBuffer_25_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_26
  assign uart_uart_vrXmitBuffer_26_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[26] :
	       uart_uart_vrXmitBuffer_27 ;
  assign uart_uart_vrXmitBuffer_26_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_27
  assign uart_uart_vrXmitBuffer_27_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[27] :
	       uart_uart_vrXmitBuffer_28 ;
  assign uart_uart_vrXmitBuffer_27_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_28
  assign uart_uart_vrXmitBuffer_28_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[28] :
	       uart_uart_vrXmitBuffer_29 ;
  assign uart_uart_vrXmitBuffer_28_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_29
  assign uart_uart_vrXmitBuffer_29_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[29] :
	       uart_uart_vrXmitBuffer_30 ;
  assign uart_uart_vrXmitBuffer_29_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_3
  assign uart_uart_vrXmitBuffer_3_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[3] :
	       uart_uart_vrXmitBuffer_4 ;
  assign uart_uart_vrXmitBuffer_3_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_30
  assign uart_uart_vrXmitBuffer_30_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[30] :
	       uart_uart_vrXmitBuffer_31 ;
  assign uart_uart_vrXmitBuffer_30_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_31
  assign uart_uart_vrXmitBuffer_31_D_IN =
	     !WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     uart_uart_fifoXmit_D_OUT[31] ;
  assign uart_uart_vrXmitBuffer_31_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_4
  assign uart_uart_vrXmitBuffer_4_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[4] :
	       uart_uart_vrXmitBuffer_5 ;
  assign uart_uart_vrXmitBuffer_4_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_5
  assign uart_uart_vrXmitBuffer_5_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[5] :
	       uart_uart_vrXmitBuffer_6 ;
  assign uart_uart_vrXmitBuffer_5_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_6
  assign uart_uart_vrXmitBuffer_6_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[6] :
	       uart_uart_vrXmitBuffer_7 ;
  assign uart_uart_vrXmitBuffer_6_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_7
  assign uart_uart_vrXmitBuffer_7_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[7] :
	       uart_uart_vrXmitBuffer_8 ;
  assign uart_uart_vrXmitBuffer_7_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_8
  assign uart_uart_vrXmitBuffer_8_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[8] :
	       uart_uart_vrXmitBuffer_9 ;
  assign uart_uart_vrXmitBuffer_8_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_9
  assign uart_uart_vrXmitBuffer_9_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_D_OUT[9] :
	       uart_uart_vrXmitBuffer_10 ;
  assign uart_uart_vrXmitBuffer_9_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // submodule uart_uart_baudGen_rBaudCounter
  assign uart_uart_baudGen_rBaudCounter_DATA_A = 16'd1 ;
  assign uart_uart_baudGen_rBaudCounter_DATA_B = 16'h0 ;
  assign uart_uart_baudGen_rBaudCounter_DATA_C = 16'h0 ;
  assign uart_uart_baudGen_rBaudCounter_DATA_F = 16'd0 ;
  assign uart_uart_baudGen_rBaudCounter_ADDA =
	     uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 ;
  assign uart_uart_baudGen_rBaudCounter_ADDB = 1'b0 ;
  assign uart_uart_baudGen_rBaudCounter_SETC = 1'b0 ;
  assign uart_uart_baudGen_rBaudCounter_SETF =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;

  // submodule uart_uart_baudGen_rBaudTickCounter
  assign uart_uart_baudGen_rBaudTickCounter_DATA_A = 3'd1 ;
  assign uart_uart_baudGen_rBaudTickCounter_DATA_B = 3'h0 ;
  assign uart_uart_baudGen_rBaudTickCounter_DATA_C = 3'h0 ;
  assign uart_uart_baudGen_rBaudTickCounter_DATA_F = 3'h0 ;
  assign uart_uart_baudGen_rBaudTickCounter_ADDA =
	     CAN_FIRE_RL_uart_uart_baudGen_count_baudtick_16x ;
  assign uart_uart_baudGen_rBaudTickCounter_ADDB = 1'b0 ;
  assign uart_uart_baudGen_rBaudTickCounter_SETC = 1'b0 ;
  assign uart_uart_baudGen_rBaudTickCounter_SETF = 1'b0 ;

  // submodule uart_uart_fifoRecv
  assign uart_uart_fifoRecv_D_IN = bitdata__h16711 ;
  assign uart_uart_fifoRecv_ENQ =
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit ;
  assign uart_uart_fifoRecv_DEQ = uart_uart_fifoRecv_r_deq_whas ;
  assign uart_uart_fifoRecv_CLR = 1'b0 ;

  // submodule uart_uart_fifoXmit
  assign uart_uart_fifoXmit_D_IN = write_req_data[31:0] ;
  assign uart_uart_fifoXmit_ENQ = uart_uart_fifoXmit_r_enq_whas ;
  assign uart_uart_fifoXmit_DEQ = CAN_FIRE_RL_uart_uart_transmit_buffer_load ;
  assign uart_uart_fifoXmit_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_read_req_addr_BITS_5_TO_0_63_EQ_0x10_02_AND_ETC___d421 =
	     (read_req_addr[5:0] == 6'h10 && read_req_size == 2'd1) ?
	       a__h37290 :
	       IF_read_req_addr_BITS_5_TO_0_63_EQ_0x18_06_AND_ETC___d420 ;
  assign IF_read_req_addr_BITS_5_TO_0_63_EQ_0x14_93_AND_ETC___d423 =
	     (read_req_addr[5:0] == 6'h14 && read_req_size == 2'd1) ?
	       a__h37284 :
	       ((read_req_addr[5:0] == 6'h0) ?
		  a__h37287 :
		  IF_read_req_addr_BITS_5_TO_0_63_EQ_0x10_02_AND_ETC___d421) ;
  assign IF_read_req_addr_BITS_5_TO_0_63_EQ_0x18_06_AND_ETC___d420 =
	     (read_req_addr[5:0] == 6'h18 && read_req_size == 2'd1) ?
	       a__h37293 :
	       a__h37296 ;
  assign IF_uart_uart_fifoRecv_notEmpty__65_THEN_uart_u_ETC___d391 =
	     v__h37025 >> x__h38107 ;
  assign IF_uart_uart_rRecvBitCount_2_EQ_uart_rg_charsi_ETC___d104 =
	     (uart_uart_rRecvBitCount == y__h16476) ?
	       ((uart_rg_parity == 2'd0 || uart_rg_stopbits == 2'd0) ?
		  3'd6 :
		  3'd5) :
	       ((uart_uart_rRecvBitCount == y__h16498) ? 3'd6 : 3'd3) ;
  assign NOT_uart_uart_fifoRecv_countReg_2_ULT_uart_uar_ETC___d180 =
	     uart_uart_fifoRecv_countReg >= uart_rg_rx_threshold ;
  assign _dand2uart_uart_pwXmitCellCountReset_EN_wset =
	     (WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	      WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	      WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ||
	      WILL_FIRE_RL_uart_uart_transmit_send_start_bit) &&
	     uart_uart_rXmitCellCount == 4'hF ;
  assign a__h37136 =
	     { 7'd0,
	       x_error_status__h36693,
	       !uart_uart_fifoRecv_FULL_N,
	       uart_uart_fifoRecv_EMPTY_N,
	       !uart_uart_fifoXmit_FULL_N,
	       !uart_uart_fifoXmit_EMPTY_N && uart_uart_rXmitState == 4'd0,
	       7'd0,
	       x_error_status__h36693,
	       !uart_uart_fifoRecv_FULL_N,
	       uart_uart_fifoRecv_EMPTY_N,
	       !uart_uart_fifoXmit_FULL_N,
	       !uart_uart_fifoXmit_EMPTY_N && uart_uart_rXmitState == 4'd0,
	       7'd0,
	       x_error_status__h36693,
	       !uart_uart_fifoRecv_FULL_N,
	       uart_uart_fifoRecv_EMPTY_N,
	       !uart_uart_fifoXmit_FULL_N,
	       !uart_uart_fifoXmit_EMPTY_N && uart_uart_rXmitState == 4'd0,
	       7'd0,
	       x_error_status__h36693,
	       !uart_uart_fifoRecv_FULL_N,
	       uart_uart_fifoRecv_EMPTY_N,
	       !uart_uart_fifoXmit_FULL_N,
	       !uart_uart_fifoXmit_EMPTY_N && uart_uart_rXmitState == 4'd0 } ;
  assign a__h37282 =
	     {2{IF_uart_uart_fifoRecv_notEmpty__65_THEN_uart_u_ETC___d391}} ;
  assign a__h37284 =
	     { 5'd0,
	       uart_rg_charsize,
	       uart_rg_parity,
	       uart_rg_stopbits,
	       6'b0,
	       uart_rg_charsize,
	       uart_rg_parity,
	       uart_rg_stopbits,
	       6'b0,
	       uart_rg_charsize,
	       uart_rg_parity,
	       uart_rg_stopbits,
	       6'b0,
	       uart_rg_charsize,
	       uart_rg_parity,
	       uart_rg_stopbits,
	       1'b0 } ;
  assign a__h37287 = {4{uart_baud_value}} ;
  assign a__h37290 = {4{uart_rg_delay_control}} ;
  assign a__h37293 = {4{uart_rg_interrupt_en}} ;
  assign a__h37296 =
	     { 3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold } ;
  assign bitdata__h16711 =
	     { uart_uart_vrRecvBuffer_31,
	       uart_uart_vrRecvBuffer_30,
	       uart_uart_vrRecvBuffer_29,
	       uart_uart_vrRecvBuffer_28,
	       uart_uart_vrRecvBuffer_27,
	       uart_uart_vrRecvBuffer_26,
	       uart_uart_vrRecvBuffer_25,
	       uart_uart_vrRecvBuffer_24,
	       uart_uart_vrRecvBuffer_23,
	       uart_uart_vrRecvBuffer_22,
	       uart_uart_vrRecvBuffer_21,
	       uart_uart_vrRecvBuffer_20,
	       uart_uart_vrRecvBuffer_19,
	       uart_uart_vrRecvBuffer_18,
	       uart_uart_vrRecvBuffer_17,
	       uart_uart_vrRecvBuffer_16,
	       uart_uart_vrRecvBuffer_15,
	       uart_uart_vrRecvBuffer_14,
	       uart_uart_vrRecvBuffer_13,
	       uart_uart_vrRecvBuffer_12,
	       uart_uart_vrRecvBuffer_11,
	       uart_uart_vrRecvBuffer_10,
	       uart_uart_vrRecvBuffer_9,
	       uart_uart_vrRecvBuffer_8,
	       uart_uart_vrRecvBuffer_7,
	       uart_uart_vrRecvBuffer_6,
	       uart_uart_vrRecvBuffer_5,
	       uart_uart_vrRecvBuffer_4,
	       uart_uart_vrRecvBuffer_3,
	       uart_uart_vrRecvBuffer_2,
	       uart_uart_vrRecvBuffer_1,
	       uart_uart_vrRecvBuffer_0 } ;
  assign uart_uart_baudGen_rBaudCounter_value_PLUS_1_8__ETC___d30 =
	     uart_uart_baudGen_rBaudCounter_Q_OUT + 16'd1 < uart_baud_value ;
  assign uart_uart_rXmitBitCount_88_EQ_uart_rg_charsize_ETC___d321 =
	     uart_uart_rXmitBitCount == y__h35310 ;
  assign uart_uart_rg_delay_count_99_EQ_uart_rg_delay_c_ETC___d301 =
	     uart_uart_rg_delay_count == uart_rg_delay_control ;
  assign uart_uart_vrRecvBuffer_0_30_XOR_uart_uart_vrRe_ETC___d169 =
	     z__h21447 ^ uart_uart_rRecvParity ;
  assign v__h37025 =
	     uart_uart_fifoRecv_EMPTY_N ? uart_uart_fifoRecv_D_OUT : 32'd0 ;
  assign x__h12717 = uart_uart_rRecvBitCount + 6'd1 ;
  assign x__h22203 = uart_uart_rXmitCellCount + 4'd1 ;
  assign x__h22229 = uart_uart_rXmitBitCount + 6'd1 ;
  assign x__h34396 = uart_uart_rg_delay_count + 16'd1 ;
  assign x__h36180 = ~uart_uart_rXmitParity ;
  assign x__h36782 =
	     (read_req_addr[5:0] == 6'h0C && read_req_size == 2'd1) ?
	       a__h37136 :
	       ((read_req_addr[5:0] == 6'h08) ?
		  a__h37282 :
		  IF_read_req_addr_BITS_5_TO_0_63_EQ_0x14_93_AND_ETC___d423) ;
  assign x__h38107 = 6'd32 - uart_rg_charsize ;
  assign x__h6165 = uart_uart_rRecvCellCount + 4'd1 ;
  assign x_error_status__h36693 =
	     { uart_uart_fifo_almost_full, uart_uart_error_status_register } ;
  assign y__h16476 = uart_rg_charsize + 6'd1 ;
  assign y__h16498 = uart_rg_charsize + 6'd2 ;
  assign y__h35310 = uart_rg_charsize - 6'd1 ;
  assign z__h21237 = uart_uart_vrRecvBuffer_0 ^ uart_uart_vrRecvBuffer_1 ;
  assign z__h21244 = z__h21237 ^ uart_uart_vrRecvBuffer_2 ;
  assign z__h21251 = z__h21244 ^ uart_uart_vrRecvBuffer_3 ;
  assign z__h21258 = z__h21251 ^ uart_uart_vrRecvBuffer_4 ;
  assign z__h21265 = z__h21258 ^ uart_uart_vrRecvBuffer_5 ;
  assign z__h21272 = z__h21265 ^ uart_uart_vrRecvBuffer_6 ;
  assign z__h21279 = z__h21272 ^ uart_uart_vrRecvBuffer_7 ;
  assign z__h21286 = z__h21279 ^ uart_uart_vrRecvBuffer_8 ;
  assign z__h21293 = z__h21286 ^ uart_uart_vrRecvBuffer_9 ;
  assign z__h21300 = z__h21293 ^ uart_uart_vrRecvBuffer_10 ;
  assign z__h21307 = z__h21300 ^ uart_uart_vrRecvBuffer_11 ;
  assign z__h21314 = z__h21307 ^ uart_uart_vrRecvBuffer_12 ;
  assign z__h21321 = z__h21314 ^ uart_uart_vrRecvBuffer_13 ;
  assign z__h21328 = z__h21321 ^ uart_uart_vrRecvBuffer_14 ;
  assign z__h21335 = z__h21328 ^ uart_uart_vrRecvBuffer_15 ;
  assign z__h21342 = z__h21335 ^ uart_uart_vrRecvBuffer_16 ;
  assign z__h21349 = z__h21342 ^ uart_uart_vrRecvBuffer_17 ;
  assign z__h21356 = z__h21349 ^ uart_uart_vrRecvBuffer_18 ;
  assign z__h21363 = z__h21356 ^ uart_uart_vrRecvBuffer_19 ;
  assign z__h21370 = z__h21363 ^ uart_uart_vrRecvBuffer_20 ;
  assign z__h21377 = z__h21370 ^ uart_uart_vrRecvBuffer_21 ;
  assign z__h21384 = z__h21377 ^ uart_uart_vrRecvBuffer_22 ;
  assign z__h21391 = z__h21384 ^ uart_uart_vrRecvBuffer_23 ;
  assign z__h21398 = z__h21391 ^ uart_uart_vrRecvBuffer_24 ;
  assign z__h21405 = z__h21398 ^ uart_uart_vrRecvBuffer_25 ;
  assign z__h21412 = z__h21405 ^ uart_uart_vrRecvBuffer_26 ;
  assign z__h21419 = z__h21412 ^ uart_uart_vrRecvBuffer_27 ;
  assign z__h21426 = z__h21419 ^ uart_uart_vrRecvBuffer_28 ;
  assign z__h21433 = z__h21426 ^ uart_uart_vrRecvBuffer_29 ;
  assign z__h21440 = z__h21433 ^ uart_uart_vrRecvBuffer_30 ;
  assign z__h21447 = z__h21440 ^ uart_uart_vrRecvBuffer_31 ;
  assign z__h27502 =
	     uart_uart_fifoXmit_D_OUT[0] ^ uart_uart_fifoXmit_D_OUT[1] ;
  assign z__h27509 = z__h27502 ^ uart_uart_fifoXmit_D_OUT[2] ;
  assign z__h27516 = z__h27509 ^ uart_uart_fifoXmit_D_OUT[3] ;
  assign z__h27523 = z__h27516 ^ uart_uart_fifoXmit_D_OUT[4] ;
  assign z__h27530 = z__h27523 ^ uart_uart_fifoXmit_D_OUT[5] ;
  assign z__h27537 = z__h27530 ^ uart_uart_fifoXmit_D_OUT[6] ;
  assign z__h27544 = z__h27537 ^ uart_uart_fifoXmit_D_OUT[7] ;
  assign z__h27551 = z__h27544 ^ uart_uart_fifoXmit_D_OUT[8] ;
  assign z__h27558 = z__h27551 ^ uart_uart_fifoXmit_D_OUT[9] ;
  assign z__h27565 = z__h27558 ^ uart_uart_fifoXmit_D_OUT[10] ;
  assign z__h27572 = z__h27565 ^ uart_uart_fifoXmit_D_OUT[11] ;
  assign z__h27579 = z__h27572 ^ uart_uart_fifoXmit_D_OUT[12] ;
  assign z__h27586 = z__h27579 ^ uart_uart_fifoXmit_D_OUT[13] ;
  assign z__h27593 = z__h27586 ^ uart_uart_fifoXmit_D_OUT[14] ;
  assign z__h27600 = z__h27593 ^ uart_uart_fifoXmit_D_OUT[15] ;
  assign z__h27607 = z__h27600 ^ uart_uart_fifoXmit_D_OUT[16] ;
  assign z__h27614 = z__h27607 ^ uart_uart_fifoXmit_D_OUT[17] ;
  assign z__h27621 = z__h27614 ^ uart_uart_fifoXmit_D_OUT[18] ;
  assign z__h27628 = z__h27621 ^ uart_uart_fifoXmit_D_OUT[19] ;
  assign z__h27635 = z__h27628 ^ uart_uart_fifoXmit_D_OUT[20] ;
  assign z__h27642 = z__h27635 ^ uart_uart_fifoXmit_D_OUT[21] ;
  assign z__h27649 = z__h27642 ^ uart_uart_fifoXmit_D_OUT[22] ;
  assign z__h27656 = z__h27649 ^ uart_uart_fifoXmit_D_OUT[23] ;
  assign z__h27663 = z__h27656 ^ uart_uart_fifoXmit_D_OUT[24] ;
  assign z__h27670 = z__h27663 ^ uart_uart_fifoXmit_D_OUT[25] ;
  assign z__h27677 = z__h27670 ^ uart_uart_fifoXmit_D_OUT[26] ;
  assign z__h27684 = z__h27677 ^ uart_uart_fifoXmit_D_OUT[27] ;
  assign z__h27691 = z__h27684 ^ uart_uart_fifoXmit_D_OUT[28] ;
  assign z__h27698 = z__h27691 ^ uart_uart_fifoXmit_D_OUT[29] ;
  assign z__h27705 = z__h27698 ^ uart_uart_fifoXmit_D_OUT[30] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        uart_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (uart_uart_fifoRecv_countReg_EN)
	  uart_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_uart_fifoRecv_countReg_D_IN;
	if (uart_uart_fifoXmit_countReg_EN)
	  uart_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_uart_fifoXmit_countReg_D_IN;
      end
    if (uart_uart_vrXmitBuffer_0_EN)
      uart_uart_vrXmitBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_0_D_IN;
    if (uart_uart_vrXmitBuffer_1_EN)
      uart_uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_1_D_IN;
    if (uart_uart_vrXmitBuffer_10_EN)
      uart_uart_vrXmitBuffer_10 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_10_D_IN;
    if (uart_uart_vrXmitBuffer_11_EN)
      uart_uart_vrXmitBuffer_11 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_11_D_IN;
    if (uart_uart_vrXmitBuffer_12_EN)
      uart_uart_vrXmitBuffer_12 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_12_D_IN;
    if (uart_uart_vrXmitBuffer_13_EN)
      uart_uart_vrXmitBuffer_13 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_13_D_IN;
    if (uart_uart_vrXmitBuffer_14_EN)
      uart_uart_vrXmitBuffer_14 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_14_D_IN;
    if (uart_uart_vrXmitBuffer_15_EN)
      uart_uart_vrXmitBuffer_15 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_15_D_IN;
    if (uart_uart_vrXmitBuffer_16_EN)
      uart_uart_vrXmitBuffer_16 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_16_D_IN;
    if (uart_uart_vrXmitBuffer_17_EN)
      uart_uart_vrXmitBuffer_17 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_17_D_IN;
    if (uart_uart_vrXmitBuffer_18_EN)
      uart_uart_vrXmitBuffer_18 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_18_D_IN;
    if (uart_uart_vrXmitBuffer_19_EN)
      uart_uart_vrXmitBuffer_19 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_19_D_IN;
    if (uart_uart_vrXmitBuffer_2_EN)
      uart_uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_2_D_IN;
    if (uart_uart_vrXmitBuffer_20_EN)
      uart_uart_vrXmitBuffer_20 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_20_D_IN;
    if (uart_uart_vrXmitBuffer_21_EN)
      uart_uart_vrXmitBuffer_21 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_21_D_IN;
    if (uart_uart_vrXmitBuffer_22_EN)
      uart_uart_vrXmitBuffer_22 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_22_D_IN;
    if (uart_uart_vrXmitBuffer_23_EN)
      uart_uart_vrXmitBuffer_23 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_23_D_IN;
    if (uart_uart_vrXmitBuffer_24_EN)
      uart_uart_vrXmitBuffer_24 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_24_D_IN;
    if (uart_uart_vrXmitBuffer_25_EN)
      uart_uart_vrXmitBuffer_25 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_25_D_IN;
    if (uart_uart_vrXmitBuffer_26_EN)
      uart_uart_vrXmitBuffer_26 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_26_D_IN;
    if (uart_uart_vrXmitBuffer_27_EN)
      uart_uart_vrXmitBuffer_27 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_27_D_IN;
    if (uart_uart_vrXmitBuffer_28_EN)
      uart_uart_vrXmitBuffer_28 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_28_D_IN;
    if (uart_uart_vrXmitBuffer_29_EN)
      uart_uart_vrXmitBuffer_29 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_29_D_IN;
    if (uart_uart_vrXmitBuffer_3_EN)
      uart_uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_3_D_IN;
    if (uart_uart_vrXmitBuffer_30_EN)
      uart_uart_vrXmitBuffer_30 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_30_D_IN;
    if (uart_uart_vrXmitBuffer_31_EN)
      uart_uart_vrXmitBuffer_31 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_31_D_IN;
    if (uart_uart_vrXmitBuffer_4_EN)
      uart_uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_4_D_IN;
    if (uart_uart_vrXmitBuffer_5_EN)
      uart_uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_5_D_IN;
    if (uart_uart_vrXmitBuffer_6_EN)
      uart_uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_6_D_IN;
    if (uart_uart_vrXmitBuffer_7_EN)
      uart_uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_7_D_IN;
    if (uart_uart_vrXmitBuffer_8_EN)
      uart_uart_vrXmitBuffer_8 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_8_D_IN;
    if (uart_uart_vrXmitBuffer_9_EN)
      uart_uart_vrXmitBuffer_9 <= `BSV_ASSIGNMENT_DELAY
	  uart_uart_vrXmitBuffer_9_D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      uart_baud_value <= `BSV_ASSIGNMENT_DELAY 16'd5;
      uart_rg_charsize <= `BSV_ASSIGNMENT_DELAY 6'd8;
      uart_rg_delay_control <= `BSV_ASSIGNMENT_DELAY 16'd0;
      uart_rg_interrupt_en <= `BSV_ASSIGNMENT_DELAY 16'd0;
      uart_rg_parity <= `BSV_ASSIGNMENT_DELAY 2'd0;
      uart_rg_rx_threshold <= `BSV_ASSIGNMENT_DELAY 5'd5;
      uart_rg_stopbits <= `BSV_ASSIGNMENT_DELAY 2'd0;
      uart_uart_error_status_register <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_fifo_almost_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_out_enable <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY 6'd0;
      uart_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY 1'd1;
      uart_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY 3'd0;
      uart_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY 6'd0;
      uart_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY 1'd1;
      uart_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rg_delay_count <= `BSV_ASSIGNMENT_DELAY 16'd0;
      uart_uart_vrRecvBuffer_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_15 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_16 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_17 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_18 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_19 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_20 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_21 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_22 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_23 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_24 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_25 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_26 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_27 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_28 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_29 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_30 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_31 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (uart_baud_value_EN)
	uart_baud_value <= `BSV_ASSIGNMENT_DELAY uart_baud_value_D_IN;
      if (uart_rg_charsize_EN)
	uart_rg_charsize <= `BSV_ASSIGNMENT_DELAY uart_rg_charsize_D_IN;
      if (uart_rg_delay_control_EN)
	uart_rg_delay_control <= `BSV_ASSIGNMENT_DELAY
	    uart_rg_delay_control_D_IN;
      if (uart_rg_interrupt_en_EN)
	uart_rg_interrupt_en <= `BSV_ASSIGNMENT_DELAY
	    uart_rg_interrupt_en_D_IN;
      if (uart_rg_parity_EN)
	uart_rg_parity <= `BSV_ASSIGNMENT_DELAY uart_rg_parity_D_IN;
      if (uart_rg_rx_threshold_EN)
	uart_rg_rx_threshold <= `BSV_ASSIGNMENT_DELAY
	    uart_rg_rx_threshold_D_IN;
      if (uart_rg_stopbits_EN)
	uart_rg_stopbits <= `BSV_ASSIGNMENT_DELAY uart_rg_stopbits_D_IN;
      if (uart_uart_error_status_register_EN)
	uart_uart_error_status_register <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_error_status_register_D_IN;
      if (uart_uart_fifo_almost_full_EN)
	uart_uart_fifo_almost_full <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifo_almost_full_D_IN;
      if (uart_uart_out_enable_EN)
	uart_uart_out_enable <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_out_enable_D_IN;
      if (uart_uart_rRecvBitCount_EN)
	uart_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvBitCount_D_IN;
      if (uart_uart_rRecvCellCount_EN)
	uart_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvCellCount_D_IN;
      if (uart_uart_rRecvData_EN)
	uart_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY uart_uart_rRecvData_D_IN;
      if (uart_uart_rRecvParity_EN)
	uart_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvParity_D_IN;
      if (uart_uart_rRecvState_EN)
	uart_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvState_D_IN;
      if (uart_uart_rXmitBitCount_EN)
	uart_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitBitCount_D_IN;
      if (uart_uart_rXmitCellCount_EN)
	uart_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitCellCount_D_IN;
      if (uart_uart_rXmitDataOut_EN)
	uart_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitDataOut_D_IN;
      if (uart_uart_rXmitParity_EN)
	uart_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitParity_D_IN;
      if (uart_uart_rXmitState_EN)
	uart_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitState_D_IN;
      if (uart_uart_rg_delay_count_EN)
	uart_uart_rg_delay_count <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rg_delay_count_D_IN;
      if (uart_uart_vrRecvBuffer_0_EN)
	uart_uart_vrRecvBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_0_D_IN;
      if (uart_uart_vrRecvBuffer_1_EN)
	uart_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_1_D_IN;
      if (uart_uart_vrRecvBuffer_10_EN)
	uart_uart_vrRecvBuffer_10 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_10_D_IN;
      if (uart_uart_vrRecvBuffer_11_EN)
	uart_uart_vrRecvBuffer_11 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_11_D_IN;
      if (uart_uart_vrRecvBuffer_12_EN)
	uart_uart_vrRecvBuffer_12 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_12_D_IN;
      if (uart_uart_vrRecvBuffer_13_EN)
	uart_uart_vrRecvBuffer_13 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_13_D_IN;
      if (uart_uart_vrRecvBuffer_14_EN)
	uart_uart_vrRecvBuffer_14 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_14_D_IN;
      if (uart_uart_vrRecvBuffer_15_EN)
	uart_uart_vrRecvBuffer_15 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_15_D_IN;
      if (uart_uart_vrRecvBuffer_16_EN)
	uart_uart_vrRecvBuffer_16 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_16_D_IN;
      if (uart_uart_vrRecvBuffer_17_EN)
	uart_uart_vrRecvBuffer_17 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_17_D_IN;
      if (uart_uart_vrRecvBuffer_18_EN)
	uart_uart_vrRecvBuffer_18 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_18_D_IN;
      if (uart_uart_vrRecvBuffer_19_EN)
	uart_uart_vrRecvBuffer_19 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_19_D_IN;
      if (uart_uart_vrRecvBuffer_2_EN)
	uart_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_2_D_IN;
      if (uart_uart_vrRecvBuffer_20_EN)
	uart_uart_vrRecvBuffer_20 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_20_D_IN;
      if (uart_uart_vrRecvBuffer_21_EN)
	uart_uart_vrRecvBuffer_21 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_21_D_IN;
      if (uart_uart_vrRecvBuffer_22_EN)
	uart_uart_vrRecvBuffer_22 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_22_D_IN;
      if (uart_uart_vrRecvBuffer_23_EN)
	uart_uart_vrRecvBuffer_23 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_23_D_IN;
      if (uart_uart_vrRecvBuffer_24_EN)
	uart_uart_vrRecvBuffer_24 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_24_D_IN;
      if (uart_uart_vrRecvBuffer_25_EN)
	uart_uart_vrRecvBuffer_25 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_25_D_IN;
      if (uart_uart_vrRecvBuffer_26_EN)
	uart_uart_vrRecvBuffer_26 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_26_D_IN;
      if (uart_uart_vrRecvBuffer_27_EN)
	uart_uart_vrRecvBuffer_27 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_27_D_IN;
      if (uart_uart_vrRecvBuffer_28_EN)
	uart_uart_vrRecvBuffer_28 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_28_D_IN;
      if (uart_uart_vrRecvBuffer_29_EN)
	uart_uart_vrRecvBuffer_29 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_29_D_IN;
      if (uart_uart_vrRecvBuffer_3_EN)
	uart_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_3_D_IN;
      if (uart_uart_vrRecvBuffer_30_EN)
	uart_uart_vrRecvBuffer_30 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_30_D_IN;
      if (uart_uart_vrRecvBuffer_31_EN)
	uart_uart_vrRecvBuffer_31 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_31_D_IN;
      if (uart_uart_vrRecvBuffer_4_EN)
	uart_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_4_D_IN;
      if (uart_uart_vrRecvBuffer_5_EN)
	uart_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_5_D_IN;
      if (uart_uart_vrRecvBuffer_6_EN)
	uart_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_6_D_IN;
      if (uart_uart_vrRecvBuffer_7_EN)
	uart_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_7_D_IN;
      if (uart_uart_vrRecvBuffer_8_EN)
	uart_uart_vrRecvBuffer_8 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_8_D_IN;
      if (uart_uart_vrRecvBuffer_9_EN)
	uart_uart_vrRecvBuffer_9 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_9_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    uart_baud_value = 16'hAAAA;
    uart_rg_charsize = 6'h2A;
    uart_rg_delay_control = 16'hAAAA;
    uart_rg_interrupt_en = 16'hAAAA;
    uart_rg_parity = 2'h2;
    uart_rg_rx_threshold = 5'h0A;
    uart_rg_stopbits = 2'h2;
    uart_uart_error_status_register = 4'hA;
    uart_uart_fifoRecv_countReg = 5'h0A;
    uart_uart_fifoXmit_countReg = 5'h0A;
    uart_uart_fifo_almost_full = 1'h0;
    uart_uart_out_enable = 1'h0;
    uart_uart_rRecvBitCount = 6'h2A;
    uart_uart_rRecvCellCount = 4'hA;
    uart_uart_rRecvData = 1'h0;
    uart_uart_rRecvParity = 1'h0;
    uart_uart_rRecvState = 3'h2;
    uart_uart_rXmitBitCount = 6'h2A;
    uart_uart_rXmitCellCount = 4'hA;
    uart_uart_rXmitDataOut = 1'h0;
    uart_uart_rXmitParity = 1'h0;
    uart_uart_rXmitState = 4'hA;
    uart_uart_rg_delay_count = 16'hAAAA;
    uart_uart_vrRecvBuffer_0 = 1'h0;
    uart_uart_vrRecvBuffer_1 = 1'h0;
    uart_uart_vrRecvBuffer_10 = 1'h0;
    uart_uart_vrRecvBuffer_11 = 1'h0;
    uart_uart_vrRecvBuffer_12 = 1'h0;
    uart_uart_vrRecvBuffer_13 = 1'h0;
    uart_uart_vrRecvBuffer_14 = 1'h0;
    uart_uart_vrRecvBuffer_15 = 1'h0;
    uart_uart_vrRecvBuffer_16 = 1'h0;
    uart_uart_vrRecvBuffer_17 = 1'h0;
    uart_uart_vrRecvBuffer_18 = 1'h0;
    uart_uart_vrRecvBuffer_19 = 1'h0;
    uart_uart_vrRecvBuffer_2 = 1'h0;
    uart_uart_vrRecvBuffer_20 = 1'h0;
    uart_uart_vrRecvBuffer_21 = 1'h0;
    uart_uart_vrRecvBuffer_22 = 1'h0;
    uart_uart_vrRecvBuffer_23 = 1'h0;
    uart_uart_vrRecvBuffer_24 = 1'h0;
    uart_uart_vrRecvBuffer_25 = 1'h0;
    uart_uart_vrRecvBuffer_26 = 1'h0;
    uart_uart_vrRecvBuffer_27 = 1'h0;
    uart_uart_vrRecvBuffer_28 = 1'h0;
    uart_uart_vrRecvBuffer_29 = 1'h0;
    uart_uart_vrRecvBuffer_3 = 1'h0;
    uart_uart_vrRecvBuffer_30 = 1'h0;
    uart_uart_vrRecvBuffer_31 = 1'h0;
    uart_uart_vrRecvBuffer_4 = 1'h0;
    uart_uart_vrRecvBuffer_5 = 1'h0;
    uart_uart_vrRecvBuffer_6 = 1'h0;
    uart_uart_vrRecvBuffer_7 = 1'h0;
    uart_uart_vrRecvBuffer_8 = 1'h0;
    uart_uart_vrRecvBuffer_9 = 1'h0;
    uart_uart_vrXmitBuffer_0 = 1'h0;
    uart_uart_vrXmitBuffer_1 = 1'h0;
    uart_uart_vrXmitBuffer_10 = 1'h0;
    uart_uart_vrXmitBuffer_11 = 1'h0;
    uart_uart_vrXmitBuffer_12 = 1'h0;
    uart_uart_vrXmitBuffer_13 = 1'h0;
    uart_uart_vrXmitBuffer_14 = 1'h0;
    uart_uart_vrXmitBuffer_15 = 1'h0;
    uart_uart_vrXmitBuffer_16 = 1'h0;
    uart_uart_vrXmitBuffer_17 = 1'h0;
    uart_uart_vrXmitBuffer_18 = 1'h0;
    uart_uart_vrXmitBuffer_19 = 1'h0;
    uart_uart_vrXmitBuffer_2 = 1'h0;
    uart_uart_vrXmitBuffer_20 = 1'h0;
    uart_uart_vrXmitBuffer_21 = 1'h0;
    uart_uart_vrXmitBuffer_22 = 1'h0;
    uart_uart_vrXmitBuffer_23 = 1'h0;
    uart_uart_vrXmitBuffer_24 = 1'h0;
    uart_uart_vrXmitBuffer_25 = 1'h0;
    uart_uart_vrXmitBuffer_26 = 1'h0;
    uart_uart_vrXmitBuffer_27 = 1'h0;
    uart_uart_vrXmitBuffer_28 = 1'h0;
    uart_uart_vrXmitBuffer_29 = 1'h0;
    uart_uart_vrXmitBuffer_3 = 1'h0;
    uart_uart_vrXmitBuffer_30 = 1'h0;
    uart_uart_vrXmitBuffer_31 = 1'h0;
    uart_uart_vrXmitBuffer_4 = 1'h0;
    uart_uart_vrXmitBuffer_5 = 1'h0;
    uart_uart_vrXmitBuffer_6 = 1'h0;
    uart_uart_vrXmitBuffer_7 = 1'h0;
    uart_uart_vrXmitBuffer_8 = 1'h0;
    uart_uart_vrXmitBuffer_9 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_req && read_req_addr[5:0] == 6'h08)
	begin
	  TASK_testplusargs___d367 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_req && read_req_addr[5:0] == 6'h08)
	begin
	  TASK_testplusargs___d368 = $test$plusargs("muart");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_req && read_req_addr[5:0] == 6'h08)
	begin
	  TASK_testplusargs___d369 = $test$plusargs("l1");
	  #0;
	end
    read_req_addr_BITS_5_TO_0_63_EQ_0x8_64_AND_TAS_ETC___d372 =
	read_req_addr[5:0] == 6'h08 &&
	(TASK_testplusargs___d367 ||
	 TASK_testplusargs___d368 && TASK_testplusargs___d369);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_req && read_req_addr[5:0] == 6'h08)
	begin
	  v__h37206 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_req &&
	  read_req_addr_BITS_5_TO_0_63_EQ_0x8_64_AND_TAS_ETC___d372)
	$write("[%10d", v__h37206, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_req &&
	  read_req_addr_BITS_5_TO_0_63_EQ_0x8_64_AND_TAS_ETC___d372)
	$write("UART read data: %h %c", v__h37025, v__h37025);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_req &&
	  read_req_addr_BITS_5_TO_0_63_EQ_0x8_64_AND_TAS_ETC___d372)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_1.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_3.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_4.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_5.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_6.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_7.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_8.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_9.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_10.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_11.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_12.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_13.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_14.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_15.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_16.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_17.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_18.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_19.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_20.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_21.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_22.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_23.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_24.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_25.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_26.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_27.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_28.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_29.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_30.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 505, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_31.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_req && write_req_addr[5:0] == 6'h04)
	begin
	  TASK_testplusargs___d435 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_req && write_req_addr[5:0] == 6'h04)
	begin
	  TASK_testplusargs___d436 = $test$plusargs("muart");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_req && write_req_addr[5:0] == 6'h04)
	begin
	  TASK_testplusargs___d437 = $test$plusargs("l0");
	  #0;
	end
    write_req_addr_BITS_5_TO_0_32_EQ_0x4_33_AND_TA_ETC___d440 =
	write_req_addr[5:0] == 6'h04 &&
	(TASK_testplusargs___d435 ||
	 TASK_testplusargs___d436 && TASK_testplusargs___d437);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_req && write_req_addr[5:0] == 6'h04)
	begin
	  v__h42004 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_req &&
	  write_req_addr_BITS_5_TO_0_32_EQ_0x4_33_AND_TA_ETC___d440)
	$write("[%10d", v__h42004, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_req &&
	  write_req_addr_BITS_5_TO_0_32_EQ_0x4_33_AND_TA_ETC___d440)
	$write("Sending ASCII: %c", write_req_data[7:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_req &&
	  write_req_addr_BITS_5_TO_0_32_EQ_0x4_33_AND_TA_ETC___d440)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mktest


